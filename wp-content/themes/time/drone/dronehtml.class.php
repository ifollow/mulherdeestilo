<?php
 class DroneHTML { protected $tag; protected $attrs = array(); protected $childs = null; public static function __callstatic($name, $arguments) { return new self($name); } public static function make($tag = null) { return new self($tag); } public static function makeNamed($tag, $name, $id = null) { return self::make($tag)->name($name)->id(is_null($id) ? DroneFunc::stringID($name) : $id); } public static function makeHidden($name, $value = '') { return self::make('input')->type('hidden')->name($name)->value($value); } public static function makeInput($name, $value = '') { return self::makeNamed('input', $name)->type('text')->value($value); } public static function makeTextarea($name, $value = '') { return self::makeNamed('textarea', $name)->add(htmlspecialchars($value)); } public static function makeSelect($name, $value = '', $options = array(), $groups = array(), $multiple = false) { $value = (array)$value; $select = self::makeNamed('select', $name)->add(); if ($multiple) { $select->name = $name.'[]'; $select->multiple = $multiple; } foreach ($groups as $group_label => $group_options) { $group = self::make('optgroup')->label($group_label); foreach ($group_options as $group_option_value) { if (isset($options[$group_option_value])) { $group->addNew('option') ->value($group_option_value) ->selected(in_array($group_option_value, $value)) ->add($options[$group_option_value]); unset($options[$group_option_value]); } } $select->add($group); } foreach (array_reverse($options, true) as $option_value => $option_label) { $select->insertNew('option') ->value($option_value) ->selected(in_array($option_value, $value)) ->add($option_label); } return $select; } public static function makeCheckboxSingle($name, $label, $checked = false) { $checkbox = self::makeNamed('input', $name)->type('checkbox')->checked($checked); $label = self::make('label')->for($checkbox->id)->add(self::makeHidden($name), $checkbox, ' ', $label); return self::make('fieldset')->add($label); } public static function makeCheckboxGroup($name, $values = array(), $options = array(), $separator = '<br />') { $alt = empty($values) || (key($values) === 0 && !is_bool(current($values))); $fieldset = self::make('fieldset')->add(); if ($alt) { $fieldset->add(self::makeHidden($name)); } foreach ($options as $option_name => $option_label) { $checkbox = self::make('input') ->type('checkbox') ->id(DroneFunc::stringID($name.'-'.$option_name)); if ($alt) { $checkbox ->name($name.'[]') ->checked(in_array((string)$option_name, $values, true)) ->value($option_name); } else { $checkbox ->name($name."[{$option_name}]") ->checked(isset($values[$option_name]) && $values[$option_name]); $fieldset->add(self::makeHidden($checkbox->name)); } $label = self::make('label') ->for($checkbox->id) ->add($checkbox, ' ', $option_label); $fieldset->add($label, $separator); } return $fieldset; } public static function makeRadioGroup($name, $value = null, $options = array(), $separator = '<br />') { $fieldset = self::make('fieldset')->add(); foreach ($options as $option_value => $option_label) { $radio = self::makeNamed('input', $name, DroneFunc::stringID($name.'-'.$option_value)) ->type('radio') ->value($option_value) ->checked($value == $option_value); $label = self::make('label') ->for($radio->id) ->add($radio, ' ', $option_label); $fieldset->add($label, $separator); } return $fieldset; } public static function makeSubmit($name, $label) { return self::makeNamed('input', $name)->type('submit')->value($label); } public static function makeLabel($for, $label) { return self::make('label')->for($for)->add($label); } public function __construct($tag = null) { $this->tag = is_string($tag) ? strtolower($tag) : null; } public function __get($name) { if ($name == 'tag') { return $this->tag; } else { return isset($this->attrs[$name]) ? $this->attrs[$name] : null; } } public function __set($name, $value) { $this->attr($name, $value); } public function __call($name, $args) { return $this->attr($name, count($args) > 0 ? $args[0] : true); } public function attr($name, $value = true) { if (is_array($name)) { foreach ($name as $name => $value) { $this->attr($name, $value); } } else { $name = strtolower((string)$name); if ($name == 'tag') { if (is_string($value)) { $this->tag = $value; } } else if ($value === null || $value === false) { if (isset($this->attrs[$name])) { unset($this->attrs[$name]); } } else { $this->attrs[$name] = $value; } } return $this; } public function add() { $args = func_get_args(); if (count($args) == 1 && is_array($args[0])) { $args = $args[0]; } if (is_null($this->childs)) { $this->childs = array(); } foreach ($args as $arg) { if (!empty($arg)) { $this->childs[] = is_a($arg, __CLASS__) ? $arg : (string)$arg; } } return $this; } public function insert($content, $position = 0) { if (is_null($this->childs) || $position >= count($this->childs)) { return $this->add($content); } if (!is_array($content)) { $content = array($content); } $_content = array(); foreach ($content as $content) { if (!empty($content)) { $_content[] = is_a($content, __CLASS__) ? $content : (string)$content; } } array_splice($this->childs, $position, 0, $_content); return $this; } public function addNew($tag = null) { $html = new self($tag); $this->add($html); return $html; } public function insertNew($tag = null, $position = 0) { $html = new self($tag); $this->insert($html, $position); return $html; } public function wrap($tag = null) { $_this = clone $this; $this->reset()->clear()->add($_this)->tag = $tag; return $_this; } public function delete($child) { if (!is_null($this->childs)) { if (is_int($child)) { if (isset($this->childs[$child])) { unset($this->childs[$child]); } } else if (($key = array_search($child, $this->childs, true)) !== false) { unset($this->childs[$key]); } $this->childs = array_values($this->childs); } return $this; } public function replace($child, $content) { if (!is_null($this->childs)) { if (is_int($child)) { if (isset($this->childs[$child])) { $this->childs[$child] = $content; } } else if (($key = array_search($child, $this->childs, true)) !== false) { $this->childs[$key] = $content; } } return $this; } public function reset() { $this->attrs = array(); return $this; } public function clear($selfclosing = false) { $this->childs = $selfclosing ? null : array(); return $this; } public function child($index) { return isset($this->childs[$index]) ? $this->childs[$index] : null; } public function childs() { return $this->childs; } public function count() { return is_null($this->childs) ? null : count($this->childs); } public function addClass($class) { if (func_num_args() > 1) { $class = func_get_args(); } if (is_array($class)) { array_map(array($this, __FUNCTION__), $class); } else if (is_string($class) && !$this->hasClass($class)) { $_class = isset($this->attrs['class']) ? $this->attrs['class'] : ''; $this->attrs['class'] = ltrim($_class.' '.$class); } return $this; } public function removeClass($class) { if (func_num_args() > 1) { $class = func_get_args(); } if (is_array($class)) { array_map(array($this, __FUNCTION__), $class); } else if (is_string($class) && $this->hasClass($class)) { $this->attrs['class'] = trim(str_ireplace(" {$class} ", ' ', " {$this->attrs['class']} ")); } return $this; } public function hasClass($class) { if (!isset($this->attrs['class'])) { return false; } return stripos(" {$this->attrs['class']} ", " {$class} ") !== false; } public function html() { $content = ''; if (!is_null($this->childs)) { foreach ($this->childs as $child) { $content .= is_a($child, __CLASS__) ? $child->html() : (string)$child; } } if (is_null($this->tag)) { return $content; } else { $charset = get_bloginfo('charset'); $attrs = array(); foreach ($this->attrs as $name => $value) { if ($value === null || $value === false) continue; $attrs[] = $value === true ? $name : sprintf('%s="%s"', $name, htmlspecialchars((string)$value, defined('ENT_HTML5') ? ENT_COMPAT | ENT_HTML5 : ENT_COMPAT, $charset, false)); } $attrs = rtrim(' '.implode(' ', $attrs)); if (is_null($this->childs)) { return "<{$this->tag}{$attrs} />"; } else { return "<{$this->tag}{$attrs}>{$content}</{$this->tag}>"; } } } public function ehtml() { echo $this->html(); } }