<?php
 class DroneTheme { const UPDATE_URL = 'http://themes.kubasto.com/update/'; const UPDATE_INTERVAL = 36; const UPDATE_INTERVAL_JITTER = 6; const SYSINFO_SLUG = 'sysinfo'; const WP_STYLE_FILENAME = 'style.css'; const WP_FUNCTIONS_FILENAME = 'functions.php'; const WP_WIDGETS_FILENAME = 'widgets.php'; const WP_LANGUAGES_DIRECTORY = 'languages'; const WP_FILTER_PRIORITY_DEFAULT = 10; const WP_OPTIONS_URL = 'options.php'; const WP_AJAX_URL = 'admin-ajax.php'; private static $instance = null; private static $setup_options_lock = false; private $start_time; private $marker_time; private $debug_log = array(); private $hooks; private $theme_options_array; private $theme_options; private $post_options = array(); private $sysinfo_options; private $plugin_page = false; private $features = array(); private $styles; private $scripts; private $drone_dir; private $drone_uri; private $debug_mode; private $class; private $theme; private $parent_theme; private $domain; private $stylesheet_dir; private $stylesheet_uri; private $template_dir; private $template_uri; protected function onBeforeConstruct() { } protected function onAfterConstruct() { } protected function onLoad() { } protected function onSetupOptions($theme_options) { } public function onThemeOptionsCompatybility(&$data, $version) { } public function onPostOptionsCompatybility(&$data, $version, $post_type) { } protected function onSetupTheme() { } protected function onInit() { } protected function onWidgetsInit() { } protected function onThemeOptions($page, $group) { } protected function onPostOptions($post_options, $post_id, $post_type) { } protected function onWidgetOptions() { } protected function onSavePost($post_id, $post_type) { } private function setMarker() { $this->marker_time = microtime(true); } private function addDebugMessage($message, $marker_time = false) { if ($this->debug_mode) { $this->debug_log[] = array( 'message' => $message, 'time' => microtime(true), 'marker_time' => $marker_time ? $this->marker_time : null, 'memory' => memory_get_usage() ); } } private function getDocComments($filename, $scope = array(T_PRIVATE, T_PROTECTED, T_PUBLIC, T_ABSTRACT)) { if (!file_exists($filename)) { return false; } if (($file = @file_get_contents($filename)) === false) { return false; } $scope = (array)$scope; $tokens = token_get_all($file); $tokens_count = count($tokens); $doccomments = array(); for ($i = 0; $i < $tokens_count; $i++) { if ( isset($tokens[$i+0][0]) && $tokens[$i+0][0] == T_DOC_COMMENT && isset($tokens[$i+1][0]) && $tokens[$i+1][0] == T_WHITESPACE && isset($tokens[$i+2][0]) && in_array($tokens[$i+2][0], $scope) && isset($tokens[$i+3][0]) && $tokens[$i+3][0] == T_WHITESPACE && isset($tokens[$i+4][0]) && $tokens[$i+4][0] == T_FUNCTION && isset($tokens[$i+5][0]) && $tokens[$i+5][0] == T_WHITESPACE && isset($tokens[$i+6][0]) && $tokens[$i+6][0] == T_STRING && isset($tokens[$i+0][1]) && isset($tokens[$i+6][1]) ) { $doccomments[$tokens[$i+6][1]] = $tokens[$i+0][1]; } } return $doccomments; } private function addSysinfoGroup() { $sysinfo = $this->theme_options->addGroup(self::SYSINFO_SLUG, __('System', $this->domain)); if (apply_filters('drone_enable_update', true)) { $sysinfo->addOption('codeline', 'purchase_code', '', __('Purchase code', $this->domain), sprintf(__('<a href="%s">Purchase code</a> is required for theme update notifications and seamless updates.', $this->domain), 'http://support.envato.com/index.php?/Knowledgebase/Article/View/506/54/where-can-i-find-my-purchase-code'), array('error_value' => '', 'max_length' => 36)); } $sysinfo->addOption('boolean', 'debug_mode', $this->debug_mode, __('Debug mode', $this->domain), '', array('caption' => __('Debug mode', $this->domain), 'disabled' => $this->debug_mode)); return $sysinfo; } private function getUpdateURL($action, $params = array()) { $params = array_merge(array( 'api' => Drone::VERSION, 'id' => $this->base_theme->id, 'version' => $this->base_theme->version, 'purchase_code' => $this->sysinfo_options->value('purchase_code'), 'action' => $action ), $params); return apply_filters('drone_update_url', self::UPDATE_URL).'?'.http_build_query($params, null, '&'); } private function contactFormOutput($result, $message) { echo json_encode(array( $this->features['contact-form']['result_var'] => $result, $this->features['contact-form']['message_var'] => $message) ); exit; } protected function __construct() { $this->start_time = $this->marker_time = microtime(true); $this->debug_mode = file_exists(get_stylesheet_directory().'/debug'); $this->onBeforeConstruct(); $this->class = get_class($this); $this->theme = wp_get_theme(); $this->theme->id = DroneFunc::stringID($this->theme->name); if (($parent = $this->theme->parent()) !== false) { $this->parent_theme = $parent; $this->parent_theme->id = DroneFunc::stringID($parent->name); } $this->stylesheet_dir = get_stylesheet_directory(); $this->stylesheet_uri = get_stylesheet_directory_uri(); $this->template_dir = get_template_directory(); $this->template_uri = get_template_directory_uri(); $this->drone_dir = $this->template_dir.'/'.Drone::DIRECTORY; $this->drone_uri = $this->template_uri.'/'.Drone::DIRECTORY; $this->hooks = array(); if (extension_loaded('eAccelerator')) { $doccomments = $this->getDocComments(TEMPLATEPATH.'/'.self::WP_FUNCTIONS_FILENAME, T_PUBLIC); } $rc = new ReflectionClass($this->class); foreach ($rc->getMethods(ReflectionMethod::IS_PUBLIC) as $method) { if ($method->class != $this->class) { continue; } if (isset($doccomments[$method->name])) { $phpdoc = $doccomments[$method->name]; } else if (($phpdoc = $method->getDocComment()) === false) { continue; } if (!preg_match_all('/@internal (?P<type>action|filter|shortcode):(?P<data>.+)$/im', $phpdoc, $phpdoc_matches, PREG_SET_ORDER)) { continue; } foreach ($phpdoc_matches as $phpdoc_match) { $phpdoc_data = array_map('trim', explode(',', $phpdoc_match['data'])); if (empty($phpdoc_data[0])) { continue; } $hook = new stdClass(); $hook->type = strtolower($phpdoc_match['type']); $hook->tag = $phpdoc_data[0]; $hook->function = array($this, $method->name); if ($hook->type == 'action' || $hook->type == 'filter') { $hook->priority = isset($phpdoc_data[1]) ? (int)$phpdoc_data[1] : self::WP_FILTER_PRIORITY_DEFAULT; $hook->args = isset($phpdoc_data[2]) ? (int)$phpdoc_data[2] : $method->getNumberOfParameters(); } $this->hooks[] = $hook; } } if (file_exists($widgets_filename = TEMPLATEPATH.'/'.self::WP_WIDGETS_FILENAME)) { require $widgets_filename; } $this->theme_options = new DroneThemeOptionsGroup($this->theme->id); add_action('after_setup_theme', array($this, '__actionAfterSetupTheme')); add_action('init', array($this, '__actionInit')); add_action('after_switch_theme', array($this, '__actionAfterSwitchTheme')); $this->onAfterConstruct(); $this->addDebugMessage(__METHOD__, true); } public function __get($name) { switch ($name) { case 'base_theme': return is_null($this->parent_theme) ? $this->theme : $this->parent_theme; case 'version': return is_null($this->parent_theme) ? $this->theme->version : $this->parent_theme->version.'-child-'.$this->theme->version; case 'wp_version': return get_bloginfo('version'); case 'debug_mode': case 'class': case 'theme': case 'parent_theme': case 'domain': case 'stylesheet_dir': case 'stylesheet_uri': case 'template_dir': case 'template_uri': return $this->{$name}; } } public function __actionAfterSetupTheme() { $this->domain = $this->base_theme->id; load_theme_textdomain($this->domain, TEMPLATEPATH.'/'.self::WP_LANGUAGES_DIRECTORY); $this->onLoad(); $this->theme_options_array = get_option($this->theme->id, array()); if (is_admin() && current_user_can('edit_theme_options')) { if (isset($_POST['settings-export'])) { $filename = DroneFunc::stringID(sprintf(__('%s theme options settings', $this->domain), $this->theme->name).' '.date('Y-m-d')).'.txt'; header('Content-type: application/force-download'); header('Content-Disposition: attachment; filename="'.$filename.'"'); die(base64_encode(serialize($this->theme_options_array))); } else if (isset($_POST['settings-import'])) { if (!is_uploaded_file($filename = $_FILES['settings-import-file']['tmp_name'])) { header('Location: '.$_SERVER['REQUEST_URI'].'&settings-import=no-file'); die; } $settings = unserialize(base64_decode(file_get_contents($filename))); if (!isset($settings[DroneThemeOptionsGroup::VERSION_KEY]) || version_compare($settings[DroneThemeOptionsGroup::VERSION_KEY], $this->version) > 0) { header('Location: '.$_SERVER['REQUEST_URI'].'&settings-import=wrong-version'); die; } update_option($this->theme->id, $settings); header('Location: '.$_SERVER['REQUEST_URI'].'&settings-import=success'); die; } } $this->setMarker(); self::$setup_options_lock = true; $this->onSetupOptions($this->theme_options); $this->sysinfo_options = $this->addSysinfoGroup(); self::$setup_options_lock = false; $this->addDebugMessage(__CLASS__.'::onSetupOptions', true); $this->setMarker(); $this->theme_options->fromArray($this->theme_options_array, array($this, 'onThemeOptionsCompatybility')); $this->addDebugMessage(__CLASS__.'::onThemeOptionsCompatybility', true); if ($this->sysinfo_options->value('debug_mode')) { $this->debug_mode = true; } add_theme_support('automatic-feed-links'); $this->setMarker(); $this->onSetupTheme(); $this->addDebugMessage(__CLASS__.'::onSetupTheme', true); foreach ($this->hooks as $hook) { switch ($hook->type) { case 'action': case 'filter': add_filter($hook->tag, $hook->function, $hook->priority, $hook->args); break; case 'shortcode': add_shortcode($hook->tag, $hook->function); break; } } add_action('admin_menu', array($this, '__actionAdminMenu')); add_action('add_meta_boxes', array($this, '__actionAddMetaBoxes')); add_action('widgets_init', array($this, '__actionWidgetsInit')); add_action('save_post', array($this, '__actionSavePost')); add_action('wp_head', array($this, '__actionWPHead')); add_action('wp_footer', array($this, '__actionWPFooter'), 100); add_action('wp_enqueue_scripts', array($this, '__actionWPEnqueueScripts')); add_action('wp_enqueue_scripts', array('DroneOptionsFontOption', '__actionWPEnqueueScripts'), 5); add_filter('body_class', array($this, '__filterBodyClass')); $this->addDebugMessage(__METHOD__); } public function __actionInit() { wp_register_style($this->theme->id.'-options', $this->drone_uri.'/css/options.css', array(), Drone::VERSION); wp_register_style($this->theme->id.'-shortcodes', $this->drone_uri.'/css/shortcodes.css', array(), Drone::VERSION); wp_register_script($this->theme->id.'-webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js', array(), '1.4.7'); wp_register_script($this->theme->id.'-jscolor', $this->drone_uri.'/ext/jscolor/jscolor.js', array(), '1.4.2'); wp_register_script($this->theme->id.'-options', $this->drone_uri.'/js/options.js', array('jquery', 'jquery-ui-sortable', $this->theme->id.'-jscolor', 'media-upload'), Drone::VERSION); wp_register_script($this->theme->id.'-update-core', $this->drone_uri.'/js/update-core.js', array('jquery'), Drone::VERSION); $this->onInit(); $this->addDebugMessage(__METHOD__); } public function __actionAfterSwitchTheme() { flush_rewrite_rules(); } public function __actionAdminMenu() { global $plugin_page; $this->plugin_page = is_null($plugin_page) ? false : substr($plugin_page, strlen($this->theme->id)+1); add_action('admin_print_styles', array($this, '__actionAdminPrintStyles')); add_action('admin_print_scripts', array($this, '__actionAdminPrintScripts')); if ($this->theme_options->count() > 0) { $theme_options_keys = array_keys($this->theme_options->childs()); $menu_slug = $this->theme->id.'-'.$theme_options_keys[0]; add_menu_page( sprintf(__('%s options', $this->domain), $this->theme->name), __('Theme Options', $this->domain), 'edit_theme_options', $menu_slug, null, version_compare($this->wp_version, '3.8') >= 0 ? 'dashicons-screenoptions' : $this->drone_uri.'/img/theme-options.png' ); foreach ($this->theme_options->childs() as $name => $child) { $label = $child->label; if (($errors = $child->errorsCount()) > 0) { $label .= sprintf(' <span class="update-plugins count-%1$d" title="%2$s"><span class="update-count">%1$d</span></span>', $errors, ''); } $hook_suffix = add_submenu_page( $menu_slug, sprintf(__('%s options', $this->domain), $child->label), $label, 'edit_theme_options', $this->theme->id.'-'.$name, array($this, '__callbackThemeOptions') ); add_action('admin_print_styles-'.$hook_suffix, array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_scripts-'.$hook_suffix, array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_head-'.$hook_suffix, array($this, '__actionAdminHeadThemeOptions')); } } add_action('admin_print_styles-post.php', array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_styles-post-new.php', array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_scripts-post.php', array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_print_scripts-post-new.php', array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_head-post.php', array($this, '__actionAdminHeadPostOptions')); add_action('admin_head-post-new.php', array($this, '__actionAdminHeadPostOptions')); add_action('admin_print_styles-widgets.php', array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_scripts-widgets.php', array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_head-widgets.php', array($this, '__actionAdminHeadWidgetOptions')); add_filter('http_headers_useragent', array($this, '__filterHttpHeadersUseragent')); if (apply_filters('drone_enable_update', true)) { add_action('admin_print_scripts-update-core.php', array($this, '__actionAdminPrintScriptsUpdateCore')); add_filter('pre_set_site_transient_update_themes', array($this, '__filterPreSetSiteTransientUpdateThemes')); } if (get_user_option('rich_editing') == 'true' && (current_user_can('edit_posts') || current_user_can('edit_pages'))) { add_filter('mce_external_plugins', array($this, '__filterMCEExternalPlugins')); add_filter('mce_external_languages', array($this, '__filterMCEExternalLanguages')); add_filter('mce_buttons_2', array($this, '__filterMCEButtons2')); } if (isset($_GET['settings-import'])) { switch ($_GET['settings-import']) { case 'success': add_settings_error('general', 'settings_import_fail', __('Theme Options imported successfully.', $this->domain), 'updated'); break; case 'no-file': add_settings_error('general', 'settings_import_fail', __('No file was selected for import.', $this->domain), 'error'); break; case 'wrong-version': add_settings_error('general', 'settings_import_fail', __('Mismatched version number of the theme.', $this->domain), 'error'); break; default: add_settings_error('general', 'settings_import_fail', __('File could not be imported.', $this->domain), 'error'); break; } } register_setting($this->theme->id, $this->theme->id, array($this, '__callbackThemeOptionsSanitize')); $this->addDebugMessage(__METHOD__); } public function __actionAdminPrintStyles() { } public function __actionAdminPrintScripts() { if (isset($this->features['shortcodes'])) { echo '<script>'.DroneFunc::minify('js', sprintf('drone_shortcodes = %s;', DroneFunc::minify('js', json_encode($this->features['shortcodes']))))."</script>\n"; } } public function __actionAdminPrintStylesOptions() { wp_enqueue_style($this->theme->id.'-options'); if (version_compare($this->wp_version, '3.8') >= 0) { wp_enqueue_style('dashicons'); } if (isset($this->features['shortcodes'])) { wp_enqueue_style($this->theme->id.'-shortcodes'); } } public function __actionAdminPrintScriptsOptions() { wp_enqueue_media(); wp_enqueue_script($this->theme->id.'-options'); } public function __actionAdminPrintScriptsUpdateCore() { if (!$this->sysinfo_options->value('purchase_code')) { wp_enqueue_script($this->theme->id.'-update-core'); wp_localize_script($this->theme->id.'-update-core', 'drone_update_core', array( 'template' => get_option('template'), 'notice' => sprintf( __('To enable this update please paste your <a href="%1$s">purchase code</a> in <a href="%2$s">Theme Options / System</a>.', $this->domain), 'http://support.envato.com/index.php?/Knowledgebase/Article/View/506/54/where-can-i-find-my-purchase-code', menu_page_url($this->theme->id.'-'.self::SYSINFO_SLUG, false) ) )); } } public function __actionAdminHeadThemeOptions() { if (($group = $this->theme_options->child($page = $this->plugin_page)) !== null) { $this->onThemeOptions($page, $group); } if (($group = $this->theme_options->child($this->plugin_page)) !== null) { if ($styles = $group->styles()) { echo '<style>'.DroneFunc::minify('css', $styles)."</style>\n"; } } if (($group = $this->theme_options->child($this->plugin_page)) !== null) { if ($scripts = $group->scripts()) { echo '<script>'.DroneFunc::minify('js', $scripts)."</script>\n"; } } } public function __actionAdminHeadPostOptions() { $post_id = (int)get_the_ID(); $post_options = $this->getPostOptions($post_id); $this->onPostOptions($post_options, $post_id, get_post_type($post_id)); if ($styles = $post_options->styles()) { echo '<style>'.DroneFunc::minify('css', $styles)."</style>\n"; } if ($scripts = $post_options->scripts()) { echo '<script>'.DroneFunc::minify('js', $scripts)."</script>\n"; } } public function __actionAdminHeadWidgetOptions() { $this->onWidgetOptions(); } public function __actionAddMetaBoxes() { foreach ($this->post_options as $post_type => $post_options) { foreach ($post_options->childs('group') as $group) { add_meta_box( DroneFunc::stringID($group->name), $group->label, array($this, '__callbackPostOptions'), $post_type, $group->context, $group->priority, array('group' => $group) ); } } } public function __actionWidgetsInit() { $this->onWidgetsInit(); } public function __actionSavePost($post_id) { if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) { return; } if (!current_user_can('edit_post', $post_id)) { return; } $post_type = get_post_type($post_id); if (isset($this->post_options[$post_type])) { $post_options = $this->post_options[$post_type]; foreach ($post_options->childs('group') as $child) { $noncename = DroneFunc::stringID($child->name.'_wpnonce', '_'); if (!isset($_POST[$noncename])) { return; } else if (!wp_verify_nonce($_POST[$noncename], DroneFunc::stringID($child->name))) { return; } } if (isset($_POST[$this->theme->id])) { $post_data = array_merge( $post_options->sanitize($_POST[$this->theme->id]), array(DronePostOptionsGroup::VERSION_KEY => $this->version) ); update_post_meta($post_id, '_'.$this->theme->id, $post_data); } } $this->onSavePost($post_id, $post_type); } public function __actionWPHead() { if (!empty($this->styles)) { echo '<style>'.DroneFunc::minify('css', implode('', $this->styles))."</style>\n"; } $scripts = ''; if (!empty($this->scripts['header']['js'])) { $scripts .= implode('', $this->scripts['header']['js']); } if (!empty($this->scripts['header']['jquery'])) { $scripts .= '(function($) { $(document).ready(function($) { '.implode('', $this->scripts['header']['jquery']).' }); })(jQuery);'; } if ($scripts) { echo '<script>'.DroneFunc::minify('js', $scripts)."</script>\n"; } $this->addDebugMessage(__METHOD__); } public function __actionWPFooter() { $scripts = ''; if (!empty($this->scripts['footer']['js'])) { $scripts .= implode('', $this->scripts['footer']['js']); } if (!empty($this->scripts['footer']['jquery'])) { $scripts .= '(function($) { $(document).ready(function($) { '.implode('', $this->scripts['footer']['jquery']).' }); })(jQuery);'; } if ($scripts) { echo '<script>'.DroneFunc::minify('js', $scripts)."</script>\n"; } $this->addDebugMessage(__METHOD__); if ($this->debug_mode) { echo "\n<!--\n"; foreach ($this->debug_log as $entry) { printf( "\t | %4dms | %5.2fmb | %-48s | %5s |\n", ($entry['time']-$this->start_time)*1000, $entry['memory'] / (1024*1024), $entry['message'], isset($entry['marker_time']) ? sprintf('%dms', ($entry['time']-$entry['marker_time'])*1000) : '-' ); } echo "-->\n"; } } public function __actionWPEnqueueScripts() { if (!empty($this->scripts['header']['jquery']) || !empty($this->scripts['footer']['jquery'])) { wp_enqueue_script('jquery'); } } public function __actionWPHeadOGP() { if (!isset($this->features['ogp'])) { return; } $options = $this->theme_options->child(array($this->features['ogp']['group'], $this->features['ogp']['name'])); if (!$options->value('enabled')) { return; } $ogp['site_name'] = get_bloginfo('name'); $title = trim(wp_title('', false)) or $title = $ogp['site_name']; $ogp['title'] = $title; $ogp['locale'] = str_replace('-', '_', get_bloginfo('language')); if (is_singular() && !is_front_page()) { global $post; $_post = get_post($post->ID); $ogp['url'] = esc_url(apply_filters('the_permalink', get_permalink($_post->ID))); $description = $_post->post_excerpt ? $_post->post_excerpt : preg_replace('/\[\/?.+?\]/', '', $_post->post_content); $description = preg_replace('/<(style|script).*>.*<\/\1>/isU', '', $description); $description = trim(strip_tags(preg_replace('/\s+/', ' ', $description))); $description = DroneFunc::stringCut($description, 250, ' [...]'); $ogp['description'] = $description; if (has_post_thumbnail($_post->ID)) { if (($img = wp_get_attachment_image_src(get_post_thumbnail_id($_post->ID), 'large')) !== false) { $ogp['image'] = $img[0]; } } } else { $ogp['url'] = get_bloginfo('url'); $ogp['description'] = get_bloginfo('description'); } if (!isset($ogp['image'])) { $ogp['image'] = $options->value('image'); } $html = DroneHTML::make(); foreach ($ogp as $property => $content) { if ($content) { $html->addNew('meta')->property('og:'.$property)->content(esc_attr($content)); } } $html->ehtml(); } public function __actionWPAjaxContactForm() { if (!isset($this->features['contact-form'])) { exit; } $options = $this->theme_options->child(array($this->features['contact-form']['group'], $this->features['contact-form']['name'])); $values = array(); foreach ($options->value('fields') as $field) { $value = isset($_POST[$field]) ? trim(strip_tags($_POST[$field])) : ''; switch ($field) { case 'name': if (empty($value)) { $this->contactFormOutput(false, __('Please enter your name.', $this->domain)); } break; case 'email': if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)+$/i', $value)) { $this->contactFormOutput(false, __('Invalid email address.', $this->domain)); } break; case 'website': if (!empty($value) && !preg_match('|^(https?://)?(www\.)?([-_a-z0-9]+\.)+[-_a-z0-9]+$|i', $value)) { $this->contactFormOutput(false, __('Invalid website address.', $this->domain)); } break; case 'phone': if (!empty($value) && !preg_match('/^[-_#\+\*\(\)0-9 ]+$/', $value)) { $this->contactFormOutput(false, __('Invalid phone number.', $this->domain)); } break; case 'message': if (strlen($value) < 3) { $this->contactFormOutput(false, __('Please write your message.', $this->domain)); } break; case 'captcha': if (function_exists('cptch_check_custom_form') && !cptch_check_custom_form()) { $this->contactFormOutput(false, __('Please complete the captcha.', $this->domain)); } break; } $values[$field] = $value; } $to = $options->value('to'); switch ($options->value('from')) { case 'to': $from = $to; break; case 'field': $from = $values['email']; break; default: $from = get_option('admin_email'); } $reply_to = $values['email']; $author = isset($values['name']) ? $values['name'] : ''; $subject = $options->value('subject'); $subject = str_replace(array('%blogname%', '%blogurl%'), array(get_bloginfo('name'), get_bloginfo('wpurl')), $subject); $subject = preg_replace('/%([a-z]+)%/ie', 'isset($values["\1"]) ? $values["\1"] : ""', $subject); $subject = wp_specialchars_decode(trim(str_replace(array("\r", "\n"), ' ', $subject))); $message = "{$values['message']}\r\n\r\n---\r\n". implode("\r\n", array_intersect_key( $values, array_flip(array_intersect($options->value('fields'), array('name', 'email', 'website', 'phone'))) )); if ($options->child('settings')->value('akismet') && defined('AKISMET_VERSION') && function_exists('akismet_get_key') && akismet_get_key()) { global $akismet_api_host, $akismet_api_port; $comment = array( 'blog' => get_option('home'), 'blog_lang' => get_locale(), 'blog_charset' => get_option('blog_charset'), 'user_ip' => $_SERVER['REMOTE_ADDR'], 'user_agent' => $_SERVER['HTTP_USER_AGENT'], 'referrer' => $_SERVER['HTTP_REFERER'], 'comment_type' => 'contactform' ); if (isset($values['name'])) { $comment['comment_author'] = $values['name']; } if (isset($values['email'])) { $comment['comment_author_email'] = $values['email']; } if (isset($values['comment_author_url'])) { $comment['comment_author_email'] = $values['website']; } if (isset($values['message'])) { $comment['comment_content'] = $values['message']; } foreach ($_SERVER as $key => $value) { if (!in_array($key, array('HTTP_COOKIE', 'HTTP_COOKIE2', 'PHP_AUTH_PW')) && is_string($value)) { $comment[$key] = $value; } else { $comment[$key] = ''; } } $query_string = DroneFunc::arraySerialize(array_map('stripslashes', $comment)); $response = akismet_http_post($query_string, $akismet_api_host, '/1.1/comment-check', $akismet_api_port); if ($response[1] == 'true') { $this->contactFormOutput(false, __('Your message is recognized as spam.', $this->domain)); } } $result = @wp_mail( $to, $subject, $message, ($options->child('settings')->value('from_header') ? "From: \"{$author}\" <{$from}>\r\n" : ''). "Reply-to: {$reply_to}\r\n". "Content-type: text/plain; charset=\"".get_bloginfo('charset')."\"\r\n" ); if ($result) { $this->contactFormOutput(true, __('Message sent.', $this->domain)); } else { $this->contactFormOutput(false, __("Error occured. Message couldn't be sent.", $this->domain)); } exit; } public function __filterBodyClass($classes) { return array_merge(array($this->theme->id.'-'.str_replace('.', '-', $this->version)), $classes); } public function __filterNavMenuCurrentItem($items) { return preg_replace('/([ "\'])(current(-menu-(item|parent|ancestor)|-cat|_page_item))([ "\'])/i', '\1current \2\5', $items); } public function __filterImgCaptionShortcode($depricated, $atts, $content = null) { extract(shortcode_atts(array( 'id' => '', 'align' => 'alignnone', 'width' => '', 'caption' => '' ), $atts)); if ((integer)$width < 1 || empty($caption)) { return $content; } $output = DroneHTML::make('div') ->addClass('wp-caption', 'caption', esc_attr($align)) ->style('width: '.((int)$width).'px;') ->add( do_shortcode($content), DroneHTML::make('div')->class('wp-caption-text caption-text')->add($caption) ); if ($id) { $output->id = esc_attr($id); } return $output->html(); } public function __filterHttpHeadersUseragent($user_agent) { return sprintf('WordPress/%s; PHP/%s; %s', $this->wp_version, PHP_VERSION, get_bloginfo('url')); } public function __filterPreSetSiteTransientUpdateThemes($transient) { if (empty($transient->checked)) { return $transient; } if (($update = get_transient($this->base_theme->id.'_update')) === false || apply_filters('drone_force_update_check', false)) { $update_response = wp_remote_get($this->getUpdateURL('info')); if (!is_wp_error($update_response) && $update_response['response']['code'] == 200 && !empty($update_response['body'])) { $update = json_decode($update_response['body']); } else { $update = ''; } set_transient( $this->base_theme->id.'_update', $update, DroneFunc::intRandJitter(self::UPDATE_INTERVAL, self::UPDATE_INTERVAL_JITTER)*3600 ); } if (is_object($update) && isset($update->version, $update->url, $update->ticket) && version_compare($update->version, $this->base_theme->version) > 0) { $transient->response[get_option('template')] = array( 'new_version' => $update->version, 'url' => $update->url, 'package' => $update->ticket ? $this->getUpdateURL('download', array('ticket' => $update->ticket)) : '' ); } return $transient; } public function __filterMCEExternalPlugins($plugin_array) { if (isset($this->features['shortcodes'])) { $plugin_array['droneshortcodes'] = $this->drone_uri.'/js/shortcodes.js'; } return $plugin_array; } public function __filterMCEExternalLanguages($languages_array) { if (isset($this->features['shortcodes'])) { $languages_array['droneshortcodes'] = $this->drone_dir.'/odd/shortcodes.php'; } return $languages_array; } public function __filterMCEButtons2($buttons) { if (isset($this->features['shortcodes'])) { array_splice($buttons, array_search('charmap', $buttons)+1, 0, 'drone-shortcodes'); } return $buttons; } public function __callbackThemeOptions() { if (($group = $this->theme_options->child($this->plugin_page)) !== null) { require $this->drone_dir.'/tpl/theme-options.php'; } } public function __callbackThemeOptionsSanitize($data) { if (isset($data[self::SYSINFO_SLUG]['purchase_code']) && $this->sysinfo_options->child('purchase_code')->sanitize($data[self::SYSINFO_SLUG]['purchase_code']) != $this->sysinfo_options->value('purchase_code')) { delete_site_transient('update_themes'); delete_transient($this->base_theme->id.'_update'); } return array_merge( $this->theme_options->toArray(), $this->theme_options->sanitize($data), array(DroneThemeOptionsGroup::VERSION_KEY => $this->version) ); } public function __callbackPostOptions($object, $box) { $group = $box['args']['group']; require $this->drone_dir.'/tpl/post-options.php'; } public function __shortcodePage($atts, $content = null, $code = '') { extract(shortcode_atts(array( 'id' => '', 'slug' => '' ), $atts)); $id = (int)$id; if ( ($slug && !is_null($page = get_page_by_path($slug))) || ($id > 0 && !is_null($page = get_post($id))) ) { return DroneFunc::wpProcessContent($page->post_content); } return ''; } public function __shortcodeNoformat($atts, $content = null, $code = '') { extract(shortcode_atts(array( 'tag' => 'pre', 'class' => '' ), $atts)); $content = DroneFunc::wpShortcodeContent($content, false); if ($tag == 'pre') { $content = preg_replace('#(<br ?/?>|^<p>|</p>$)#i', '', $content); $content = preg_replace('#(</p>\r?\n<p>|</p>\r?\n|\r?\n<p>)#i', "\n\n", $content); } $content = htmlspecialchars($content, defined('ENT_HTML5') ? ENT_COMPAT | ENT_HTML5 : ENT_COMPAT, get_bloginfo('charset'), false); $output = DroneHTML::make($tag)->add($content); if (!empty($class)) { $output->class($class); } return $output->html(); } protected function getPostOptions($post_id_type = 'post') { $post_id = is_int($post_id_type) ? $post_id_type : null; $post_type = is_null($post_id) ? $post_id_type : get_post_type($post_id); if (!isset($this->post_options[$post_type])) { $this->post_options[$post_type] = new DronePostOptionsGroup($this->theme->id); } if (!is_null($post_id)) { static $last_post_id = null; if ($post_id !== $last_post_id) { $post_data = get_post_meta($post_id, '_'.$this->theme->id, true); $this->setMarker(); $this->post_options[$post_type]->fromArray($post_data, array($this, 'onPostOptionsCompatybility'), array($post_type)); $this->addDebugMessage(__CLASS__.'::onPostOptionsCompatybility', true); $last_post_id = $post_id; } } return $this->post_options[$post_type]; } public function addThemeFeature($name, $params = array()) { switch ($name) { case 'query-vars': extract(array_merge(array( 'qvars' => array() ), $params)); if (!empty($qvars)) { add_action('query_vars', create_function('$qvars', 'return array_merge($qvars, '.var_export((array)$qvars, true).');')); } break; case 'nav-menu-current-item': add_filter('wp_nav_menu_items', array($this, '__filterNavMenuCurrentItem')); add_filter('wp_list_pages', array($this, '__filterNavMenuCurrentItem')); add_filter('wp_list_categories', array($this, '__filterNavMenuCurrentItem')); break; case 'img-caption-shortcode-fixed': add_filter('img_caption_shortcode', array($this, '__filterImgCaptionShortcode'), 10, 3); break; case 'tinymce-shortcodes-menu': if (!isset($this->features['shortcodes'])) { $this->features['shortcodes'] = array(); } $this->features['shortcodes'] = array_merge($this->features['shortcodes'], $params); break; case 'widget-unwrapped-text': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null ), $params)); DroneWidget::$_on_setup_options['unwrapped-text'] = $on_setup_options; DroneWidget::$_on_html['unwrapped-text'] = $on_html; DroneWidget::$_on_output_html['unwrapped-text'] = $on_output_html; add_action('widgets_init', create_function('', "register_widget('DroneWidgetUnwrappedText');")); break; case 'widget-page': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null ), $params)); DroneWidget::$_on_setup_options['page'] = $on_setup_options; DroneWidget::$_on_html['page'] = $on_html; DroneWidget::$_on_output_html['page'] = $on_output_html; add_action('widgets_init', create_function('', "register_widget('DroneWidgetPage');")); break; case 'widget-posts-list': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null, 'on_post' => null ), $params)); DroneWidget::$_on_setup_options['posts-list'] = $on_setup_options; DroneWidget::$_on_html['posts-list'] = $on_html; DroneWidget::$_on_output_html['posts-list'] = $on_output_html; DroneWidgetPostsList::$_on_post = $on_post; add_action('widgets_init', create_function('', "register_widget('DroneWidgetPostsList');")); break; case 'widget-twitter': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null, 'on_tweet' => null ), $params)); DroneWidget::$_on_setup_options['twitter'] = $on_setup_options; DroneWidget::$_on_html['twitter'] = $on_html; DroneWidget::$_on_output_html['twitter'] = $on_output_html; DroneWidgetTwitter::$_on_tweet = $on_tweet; add_action('widgets_init', create_function('', "register_widget('DroneWidgetTwitter');")); break; case 'widget-flickr': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null, 'on_photo' => null ), $params)); DroneWidget::$_on_setup_options['flickr'] = $on_setup_options; DroneWidget::$_on_html['flickr'] = $on_html; DroneWidget::$_on_output_html['flickr'] = $on_output_html; DroneWidgetFlickr::$_on_photo = $on_photo; add_action('widgets_init', create_function('', "register_widget('DroneWidgetFlickr');")); break; case 'option-favicon': extract(array_merge(array( 'group' => 'other', 'name' => 'favicon', 'default' => '' ), $params)); $child = $this->theme_options->child($group); if ($child->isGroup()) { $child ->addOption('image', $name, '', __('Favicon image', $this->domain), sprintf(__("Paste favicon's URL or select/upload an image (%s).", $this->domain), '<code>png</code>, <code>gif</code>, <code>ico</code>'), array('title' => __('Select icon', $this->domain), 'filter' => 'png|gif|ico')) ->importFromArray($this->theme_options_array); $html = '<link rel="shortcut icon" href="%s" />'; $func = "if (\$favicon = {$this->class}::to('{$group}/{$name}')) { printf('{$html}', \$favicon); }"; if ($default) { $func .= "else { printf('{$html}', '{$default}'); }"; } add_action('wp_head', create_function('', $func)); } break; case 'option-feed-url': extract(array_merge(array( 'group' => 'other', 'name' => 'feed_url' ), $params)); $child = $this->theme_options->child($group); if ($child->isGroup()) { $child ->addOption('codeline', $name, '', __('Alternative feed URL', $this->domain), __('E.g. FeedBurner.', $this->domain)) ->importFromArray($this->theme_options_array); $func = "\$feed_url = {$this->class}::to('{$group}/{$name}');". "return \$feed_url && stripos(\$output, 'comments') === false ? \$feed_url : \$output;"; add_filter('feed_link', create_function('$output, $feed', $func), 10, 2); } break; case 'option-tracking-code': extract(array_merge(array( 'group' => 'other', 'name' => 'tracking_code' ), $params)); $child = $this->theme_options->child($group); if ($child->isGroup()) { $child ->addOption('code', $name, '', __('Tracking code', $this->domain), __('E.g. Google Analitycs.', $this->domain)) ->importFromArray($this->theme_options_array); add_action('wp_head', create_function('', "echo {$this->class}::to('{$group}/{$name}');"), 100); } break; case 'option-ogp': extract($params = array_merge(array( 'group' => 'other', 'name' => 'ogp' ), $params)); $child = $this->theme_options->child($group); if ($child->isGroup()) { $child = $child->addGroup($name, __('Open Graph Protocol', $this->domain)); $enabled = $child->addOption('boolean', 'enabled', true, '', '', array('caption' => __('Enabled', $this->domain))); $enabled->importFromArray($this->theme_options_array); $child ->addOption('image', 'image', '', __('Default image', $this->domain), '', array('parent' => $enabled, 'indent' => true)) ->importFromArray($this->theme_options_array); $this->features['ogp'] = $params; add_action('wp_head', array($this, '__actionWPHeadOGP'), 1); } break; case 'option-custom-css': extract(array_merge(array( 'group' => 'advanced', 'name' => 'custom_css' ), $params)); $child = $this->theme_options->child($group); if ($child->isGroup()) { $child ->addOption('code', $name, '', __('Custom CSS code', $this->domain)) ->importFromArray($this->theme_options_array); add_action('wp_head', create_function('', "{$this->class}::getInstance()->addDocumentStyle({$this->class}::to('{$group}/{$name}'));"), 1); } break; case 'option-custom-js': extract(array_merge(array( 'group' => 'advanced', 'name' => 'custom_js' ), $params)); $child = $this->theme_options->child($group); if ($child->isGroup()) { $child ->addOption('code', $name, '', __('Custom JavaScript code', $this->domain)) ->importFromArray($this->theme_options_array); add_action('wp_head', create_function('', "{$this->class}::getInstance()->addDocumentScript({$this->class}::to('{$group}/{$name}'));"), 1); } break; case 'option-contact-form': extract($params = array_merge(array( 'group' => '', 'name' => 'contact_form', 'form_id' => '', 'form_class' => 'contact-form', 'result_var' => 'result', 'message_var' => 'message' ), $params)); $child = $this->theme_options->child($group); if ($child->isGroup()) { $child = $child->addGroup($name, __('Contact form', $this->domain)); $subject_description = '<code>%blogname%</code>&nbsp;-&nbsp;'.__('blog name', $this->domain).', '. '<code>%blogurl%</code>&nbsp;-&nbsp;'.__('blog url', $this->domain).', '. '<code>%name%</code>&nbsp;-&nbsp;'.__('name field', $this->domain).', '. '<code>%email%</code>&nbsp;-&nbsp;'.__('e-mail field', $this->domain).', '. '<code>%website%</code>&nbsp;-&nbsp;'.__('website field', $this->domain).', '. '<code>%phone%</code>&nbsp;-&nbsp;'.__('phone number field', $this->domain).', '. '<code>%subject%</code>&nbsp;-&nbsp;'.__('subject field', $this->domain).'.'; $child ->addOption('group', 'fields', array('name', 'email', 'subject', 'message'), __('Available form fields', $this->domain), '&lowast; '.__('required fields (if present).', $this->domain), array('options' => array( 'name' => __('Name', $this->domain).'<sup>&lowast;</sup>', 'email' => __('E-mail', $this->domain).'<sup>&lowast;</sup>', 'website' => __('Website', $this->domain), 'phone' => __('Phone number', $this->domain), 'subject' => __('Subject', $this->domain), 'message' => __('Message', $this->domain).'<sup>&lowast;</sup>', 'captcha' => sprintf('<a href="http://wordpress.org/plugins/captcha/">%s</a><sup>&lowast;</sup>', __('Captcha', $this->domain)) ), 'multiple' => true, 'sortable' => true, 'disabled' => function_exists('cptch_display_captcha_custom') ? array('email', 'message') : array('email', 'message', 'captcha'))) ->importFromArray($this->theme_options_array); $child ->addOption('text', 'subject', '[%blogname%] %subject%', __('E-mail subject', $this->domain), $subject_description, array()) ->importFromArray($this->theme_options_array); $child ->addOption('codeline', 'to', get_option('admin_email'), __('Recipient e-mail address', $this->domain), '', array()) ->importFromArray($this->theme_options_array); $child ->addOption('list', 'from', 'admin', __('Sender e-mail address', $this->domain), __("Some servers allow only for sending emails from their own domain, so in that case make sure it's the proper email.", $this->domain), array('options' => array( 'admin' => sprintf('%s (%s)', __('WordPress settings e-mail', $this->domain), get_option('admin_email')), 'to' => __('Recipient e-mail address', $this->domain), 'field' => __('E-mail form field', $this->domain) ))) ->importFromArray($this->theme_options_array); $settings_default = array('from_header'); $settings_disabled = array(); if (defined('AKISMET_VERSION')) { $settings_default[] = 'akismet'; } else { $settings_disabled[] = 'akismet'; } $child ->addOption('group', 'settings', $settings_default, __('Advanced settings', $this->domain), '', array('options' => array( 'akismet' => sprintf(__('Protect from spam with %s', $this->domain), '<a href="http://wordpress.org/plugins/akismet/">Akismet</a>'), 'from_header' => sprintf(__('Override %s header with Name field', $this->domain), '<code>From</code>') ), 'multiple' => true, 'disabled' => $settings_disabled)) ->importFromArray($this->theme_options_array); $this->features['contact-form'] = array_merge($params, array( 'action' => $action = $this->theme->id.'_contact_form' )); add_action("wp_ajax_nopriv_{$action}", array($this, '__actionWPAjaxContactForm')); add_action("wp_ajax_{$action}", array($this, '__actionWPAjaxContactForm')); } break; case 'shortcode-page': add_shortcode('page', array($this, '__shortcodePage')); break; case 'shortcode-noformat': add_shortcode('noformat', array($this, '__shortcodeNoformat')); break; } } public function addDocumentStyle($style) { if (empty($style)) { return; } if (!isset($this->styles)) { $this->styles = array(); } $this->styles[] = (string)$style; } public function addDocumentScript($script, $in_footer = false) { if (empty($script)) { return; } $p = $in_footer ? 'footer' : 'header'; if (!isset($this->scripts[$p]['js'])) { $this->scripts[$p]['js'] = array(); } $this->scripts[$p]['js'][] = (string)$script; } public function addDocumentJQueryScript($jquery_script, $in_footer = false) { if (empty($jquery_script)) { return; } $p = $in_footer ? 'footer' : 'header'; if (!isset($this->scripts[$p]['jquery'])) { $this->scripts[$p]['jquery'] = array(); } $this->scripts[$p]['jquery'][] = (string)$jquery_script; } public static function getInstance() { if (is_null(self::$instance)) { $class_name = function_exists('get_called_class') ? get_called_class() : __CLASS__; self::$instance = new $class_name(); } return self::$instance; } public static function create($class_name) { self::$instance = new $class_name(); } public static function get($prop) { _deprecated_function('DroneTheme::get()', '4.1', 'DroneTheme::getInstance()->property'); return self::getInstance()->{$prop}; } public static function name() { _deprecated_function('DroneTheme::name()', '4.1', 'DroneTheme::getInstance()->theme->id'); return self::getInstance()->theme->id; } public static function to_($name, $skip_if = null) { $child = self::getInstance()->theme_options->findChild($name, $skip_if); if (self::$setup_options_lock && !is_null($child) && $child->isOption()) { $child->importFromArray(self::getInstance()->theme_options_array); } return $child; } public static function to($name, $skip_if = null, $fallback = null) { $child = self::to_($name, $skip_if); return !is_null($child) && $child->isOption() ? $child->value : $fallback; } public static function po_($name, $skip_if = null) { global $post; if (isset($post)) { return self::getInstance()->getPostOptions((int)$post->ID)->findChild($name, $skip_if); } } public static function po($name, $skip_if = null, $fallback = null) { $child = self::po_($name, $skip_if); return !is_null($child) && $child->isOption() ? $child->value : $fallback; } public static function io_($po_name, $to_name) { $po_child = self::po_($po_name); if (!is_null($po_child) && $po_child->isOption() && !$po_child->isDefault()) { return $po_child; } $to_child = self::to_($to_name); if (!is_null($to_child) && $to_child->isOption()) { return $to_child;; } } public static function io($po_name, $to_name, $fallback = null) { $child = self::io_($po_name, $to_name); return !is_null($child) ? $child->value : $fallback; } public static function setThemeOption($name, $value) { _deprecated_function('DroneTheme::setThemeOption()', '3.0'); return self::getInstance()->theme_options->value($name, $value); } public static function getThemeOption($name, $obj = false) { _deprecated_function('DroneTheme::getThemeOption()', '3.0', 'DroneTheme::to()'); if (is_array($name)) { foreach ($name as $name) { if (!is_null($option = self::getThemeOption($name, $obj))) { return $option; } } } else { if (is_null($option = self::getInstance()->theme_options->child((string)$name))) { return; } if (self::$setup_options_lock && $option->isOption()) { $option->importFromArray(self::getInstance()->theme_options_array); } return $obj ? $option : $option->value; } } public static function themeOption($name, $fallback = '') { _deprecated_function('DroneTheme::themeOption()', '3.0', 'echo DroneTheme::to()'); $option = self::getThemeOption($name, true); echo is_null($option) || ($fallback && $option->isDefault()) ? (string)$fallback : $option->value; return !is_null($option) && !$option->isDefault(); } public static function getNotEmptyThemeOption($names, $obj = false) { _deprecated_function('DroneTheme::getNotEmptyThemeOption()', '3.0'); foreach ($names as $name) { $option = self::getThemeOption($name, $obj); if (!empty($option)) { return $option; } } return null; } public static function notEmptyThemeOption($name) { _deprecated_function('DroneTheme::notEmptyThemeOption()', '3.0'); $arg = is_array($name) ? $name : func_get_args(); echo call_user_func('DroneTheme::getNotEmptyThemeOption', $arg); } public static function getPostOption($name, $obj = false) { _deprecated_function('DroneTheme::getPostOption()', '3.0', 'DroneTheme::po()'); if (is_array($name)) { $last_name = array_pop($name); foreach ($name as $name) { if (!is_null($option = self::getPostOption($name, $obj))) { return $option; } } return self::getPostOption($last_name, $obj); } else { global $post; if (isset($post)) { $option = self::getInstance()->getPostOptions((int)$post->ID)->child((string)$name); return is_null($option) || $obj ? $option : $option->value; } } } public static function postOption($name, $fallback = '') { _deprecated_function('DroneTheme::postOption()', '3.0', 'echo DroneTheme::po()'); $option = self::getPostOption($name, true); echo is_null($option) || ($fallback && $option->isDefault()) ? (string)$fallback : $option->value; return !is_null($option) && !$option->isDefault(); } public static function getInheritOption($post_option_name, $theme_option_name) { _deprecated_function('DroneTheme::getInheritOption()', '3.0', 'DroneTheme::io()'); $option = self::getPostOption($post_option_name, true); if (is_null($option) || $option->isDefault()) { $value = self::getThemeOption($theme_option_name); } else { $value = $option->value; } return $value; } public static function inheritOption($post_option_name, $theme_option_name) { _deprecated_function('DroneTheme::inheritOption()', '3.0', 'echo DroneTheme::io()'); echo self::getInheritOption($post_option_name, $theme_option_name); } public static function getPostMeta($name) { $post_id = get_the_ID(); static $cache = array(); if (isset($cache[$post_id][$name])) { return $cache[$post_id][$name]; } switch ($name) { case 'title': $result = get_the_title(); break; case 'link': $result = esc_url(apply_filters('the_permalink', get_permalink())); break; case 'link_edit': $result = get_edit_post_link(); break; case 'date_year_link': $result = get_year_link(get_the_date('Y')); break; case 'date_month_link': $result = call_user_func_array('get_month_link', explode(' ', get_the_date('Y n'))); break; case 'date_day_link': $result = call_user_func_array('get_day_link', explode(' ', get_the_date('Y n j'))); break; case 'date': $result = get_the_date(); break; case 'date_modified': $result = get_the_modified_date(); break; case 'time': $result = get_the_time(); break; case 'time_modified': $result = get_the_modified_time(); break; case 'time_diff': $result = sprintf(__('%s ago', self::getInstance()->domain), human_time_diff(get_post_time('U', true))); break; case 'time_modified_diff': $result = sprintf(__('%s ago', self::getInstance()->domain), human_time_diff(get_post_modified_time('U', true))); break; case 'category_list': $result = get_the_category_list(', '); break; case 'tags_list': $result = get_the_tag_list('', ', '); break; case 'comments_link': $result = get_comments_link(); break; case 'comments_count': $result = get_comments_number(); break; case 'comments_number': $result = DroneFunc::functionGetOutputBuffer('comments_number'); break; case 'author_link': global $authordata; $result = get_author_posts_url($authordata->ID, $authordata->user_nicename); break; case 'author_name': $result = get_the_author(); break; default: return ''; } $result = trim($result); $cache[$post_id][$name] = $result; return $result; } public static function postMeta($name) { echo self::getPostMeta($name); } public static function getPostMetaFormat($format) { $name_pattern = '([_a-z]{2,}?)(_esc)?'; $format = preg_replace_callback('#\[(!?)%('.$name_pattern.')%\](.*?)\[/%\2%\]#', 'DroneTheme::getPostMetaFormatCallback1', $format); $format = preg_replace('/%('.$name_pattern.')%/', '%%\1%%', $format); $args = func_get_args(); $s = call_user_func_array('sprintf', array_merge(array($format), array_slice($args, 1))); $s = preg_replace_callback('/%'.$name_pattern.'%/', 'DroneTheme::getPostMetaFormatCallback2', $s); return $s; } private static function getPostMetaFormatCallback1($matches) { $condition = (bool)self::getPostMeta($matches[3]); if ($matches[1]) { $condition = !$condition; } return $condition ? $matches[5] : ''; } private static function getPostMetaFormatCallback2($matches) { $s = self::getPostMeta($matches[1]); if (!empty($matches[2])) { $s = esc_attr($s); } return $s; } public static function postMetaFormat($format) { $args = func_get_args(); echo call_user_func_array('DroneTheme::getPostMetaFormat', $args); } public static function contactForm($field_callback, $before_callback = null, $after_callback = null, $return = false) { $_this = self::getInstance(); if (!isset($_this->features['contact-form'])) { return; } $options = $_this->theme_options->child(array($_this->features['contact-form']['group'], $_this->features['contact-form']['name'])); $labels = array( 'name' => __('Name', $_this->domain), 'email' => __('E-mail', $_this->domain), 'website' => __('Website', $_this->domain), 'phone' => __('Phone number', $_this->domain), 'subject' => __('Subject', $_this->domain), 'message' => __('Message', $_this->domain), 'captcha' => __('Captcha', $_this->domain) ); $requires = array( 'name' => true, 'email' => true, 'website' => false, 'phone' => false, 'subject' => false, 'message' => true, 'captcha' => true ); $output = DroneHTML::make('form') ->action(admin_url(self::WP_AJAX_URL)) ->method('post') ->add( DroneHTML::makeHidden('action', $_this->features['contact-form']['action']) ); if ($_this->features['contact-form']['form_id']) { $output->id($_this->features['contact-form']['form_id']); } if ($_this->features['contact-form']['form_class']) { $output->class($_this->features['contact-form']['form_class']); } if (!is_null($before_callback)) { $output->add(is_callable($before_callback) ? call_user_func($before_callback) : (string)$before_callback); } if (is_callable($field_callback)) { foreach ($options->value('fields') as $field) { $html = call_user_func($field_callback, $field, $requires[$field], $labels[$field]); if ($field == 'captcha' && function_exists('cptch_display_captcha_custom')) { $captcha = DroneHTML::makeHidden('cntctfrm_contact_action', 'true')->html(). preg_replace('/ style="[^"]*"/i', '', cptch_display_captcha_custom()); $html = strpos($html, '%s') !== false ? sprintf($html, $captcha) : $captcha; } $output->add($html); } } if (!is_null($after_callback)) { $output->add(is_callable($after_callback) ? call_user_func($after_callback) : (string)$after_callback); } if ($return) { return $output->html(); } else { $output->ehtml(); } } }