<?php
 abstract class DroneOptionsChild { const GROUP_CLASS = 'DroneOptionsGroup'; const OPTION_CLASS = 'DroneOptionsOption'; protected $name; public $label = ''; public $description = ''; public $parent; public $parent_value = true; public function __construct($name) { $this->name = $name; } public function __get($name) { if ($name == 'name') { return $this->name; } } public function isGroup() { return is_a($this, self::GROUP_CLASS); } public function isOption() { return is_a($this, self::OPTION_CLASS); } public function isVisible() { return is_null($this->parent) || in_array($this->parent->value, (array)$this->parent_value, true); } } abstract class DroneOptionsGroup extends DroneOptionsChild { const VERSION_KEY = '__version'; protected $class; protected $level; protected $childs = array(); protected function getStructName($name) { return $this->name ? "{$this->name}[{$name}]" : $name; } public function __construct($name, $level = 0) { parent::__construct($name); $this->class = get_class($this); $this->level = $level; } public function __get($name) { if ($name == 'level') { return $this->level; } else { return parent::__get($name); } } public function addChild($name, $child, $subsequent = '') { if ($subsequent && ($pos = array_search($subsequent, array_keys($this->childs))) !== false) { $this->childs = array_slice($this->childs, 0, $pos, true) + array($name => $child) + array_slice($this->childs, $pos, null, true); } else { $this->childs[$name] = $child; } } public function findChild($paths, $skip_if = null) { if ($skip_if && !is_callable($skip_if)) { switch ($skip_if) { case 'empty': $skip_if = create_function('$c', 'return empty($c->value);'); break; case 'default': $skip_if = create_function('$c', 'return $c->isDefault();'); break; default: $skip_if = null; } } foreach ((array)$paths as $path) { $child = $this->child($path); if (!is_null($child) && !($child->isOption() && $skip_if && $skip_if($child))) { return $child; } } } public function deleteChild($path) { if (empty($path)) { return; } if (is_string($path)) { $path = explode('/', trim($path, '/')); } if (!is_array($path)) { return; } $name = array_shift($path); if (!isset($this->childs[$name])) { return; } $child = $this->childs[$name]; if (empty($path) || $child->isOption()) { unset($this->childs[$name]); } else { $child->deleteChild($path); } } public function child($path) { if (is_string($path)) { $path = explode('/', trim($path, '/')); } if (!is_array($path)) { return; } do { if (empty($path)) { return $this; } else { $name = trim((string)array_shift($path)); } } while ($name == ''); if (!isset($this->childs[$name])) { return; } $child = $this->childs[$name]; if (empty($path) || $child->isOption()) { return $child; } else { return $child->child($path); } } public function childs($type = 'all') { if ($type == 'group' || $type == 'option') { return array_filter($this->childs, create_function('$child', 'return $child->is'.ucfirst($type).'();')); } else { return $this->childs; } } public function count() { return count($this->childs); } public function addGroup($name, $label = '', $description = '', $subsequent = '') { $group = new $this->class($this->getStructName($name), $this->level+1); $group->label = $label; $group->description = $description; $this->addChild($name, $group, $subsequent); return $group; } public function addOption($type, $name, $default, $label = '', $description = '', $properties = array(), $subsequent = '') { if (($class = DroneOptionsOption::getObjectClass($type)) === false) { return; } $option = new $class($this->getStructName($name), $default, $properties); $option->label = $label; $option->description = $description; $this->addChild($name, $option, $subsequent); return $option; } public function addEnabledOption($type, $name, $enabled, $default, $label, $enabled_caption, $description = '', $properties = array(), $subsequent = '') { $properties = array_merge(array('indent' => true), $properties); $group = $this->addGroup($name, $label, '', $subsequent); $parent = $group->addOption('boolean', 'enabled', $enabled, '', '', array('caption' => $enabled_caption)); $option = $group->addOption($type, $name, $default, '', $description, $properties); $option->parent = $parent; return $option; } public function value($path, $value = null) { $child = $this->child($path); if (!is_null($child) && $child->isOption()) { if (is_null($value)) { return $child->value; } else { $child->value = $value; } } } public function errorsCount() { $errors = 0; foreach ($this->childs as $child) { $errors += $child->isGroup() ? $child->errorsCount() : ($child->isError() ? 1 : 0); } return $errors; } public function reset() { foreach ($this->childs as $child) { $child->reset(); } } public function fromArray(&$haystack, $compatybility_callback = null, $compatybility_params = array()) { if (!is_array($haystack)) { $this->reset(); return false; } if (empty($haystack)) { $this->reset(); return true; } if (!is_null($compatybility_callback) && is_callable($compatybility_callback)) { $version = isset($haystack[self::VERSION_KEY]) ? $haystack[self::VERSION_KEY] : 1; if (version_compare($version, DroneTheme::getInstance()->version) < 0) { call_user_func_array($compatybility_callback, array_merge(array(&$haystack, $version), $compatybility_params)); } } foreach ($this->childs as $name => $child) { if (!isset($haystack[$name])) { $child->reset(); } else if ($child->isGroup()) { $child->fromArray($haystack[$name]); } else { $child->value = $haystack[$name]; } } return true; } public function toArray() { $haystack = array(); foreach ($this->childs as $name => $child) { $haystack[$name] = $child->isGroup() ? $child->toArray() : $child->value; } return $haystack; } public function styles() { $styles = ''; foreach ($this->childs as $child) { $styles .= $child->styles(); } return $styles; } public function scripts() { $scripts = ''; foreach ($this->childs as $child) { $scripts .= $child->scripts(); } return $scripts; } public function sanitize($values) { $sanitized = array(); if (is_array($values)) { foreach ($this->childs as $name => $child) { if (isset($values[$name]) && ($child->isOption() || is_array($values[$name]))) { $sanitized[$name] = $child->sanitize($values[$name]); } } } return $sanitized; } abstract public function html(); } class DroneThemeOptionsGroup extends DroneOptionsGroup { public function html() { if ($this->label) { $output = DroneHTML::make('table')->class('form-table drone-group'); $tbody = $output->addNew('tbody'); } else { $output = $tbody = DroneHTML::make(); } foreach ($this->childs as $child) { if ($child->isGroup() && !$child->label) { $tbody->add($child->html()); } else { $row = DroneHTML::make('tr')->class('drone-row')->valign('top'); if ($child->isOption() && $child->isError()) { $row->addClass('drone-error'); } if ($child->isOption() && $child->indent) { $row->addClass('drone-indent'); } if ($child->label) { $row ->addNew('th')->class('drone-label')->scope('row') ->addNew('label')->add($child->label); } $option = $row ->addNew('td')->colspan(!$child->label ? 2 : null) ->addNew('div')->class('drone-option'); if (is_object($child->parent) && $child->parent->isOption()) { $option->attr(array( 'data-drone-parent' => $child->parent->name, 'data-drone-parent-value' => json_encode((array)$child->parent_value) )); } $option->add($child->html()); if ($child->description) { $option->addNew('p')->class('description drone-description')->add($child->description); } $tbody->add($row); } } return $output; } } class DronePostOptionsGroup extends DroneThemeOptionsGroup { public $context = 'advanced'; public $priority = 'default'; public function addGroup($name, $label = '', $description = '', $context = 'advanced', $priority = 'default') { $group = parent::addGroup($name, $label, $description); $group->context = $context; $group->priority = $priority; return $group; } } class DroneWidgetOptionsGroup extends DroneOptionsGroup { public function html() { $output = DroneHTML::make(); foreach ($this->childs as $name => $child) { if ($child->isGroup()) { $output->add($child->html()); } else { $row = DroneHTML::make('div')->class('drone-row'); if ($child->indent) { $row->addClass('drone-indent'); } $option = $row->addNew('div')->class('drone-option'); if ($child->label) { $option->addNew('label')->class('drone-label')->add($child->label.':'); } if (is_object($child->parent) && $child->parent->isOption()) { $option->attr(array( 'data-drone-parent' => $child->parent->name, 'data-drone-parent-value' => json_encode((array)$child->parent_value) )); } $option->add($child->html()); if ($child->description) { $option->addNew('p')->class('description drone-description')->add($child->description); } $output->add($row); } } return $output; } } abstract class DroneOptionsOption extends DroneOptionsChild { protected $domain; protected $default; private $value; public $error_value; public $indent = false; public $tag; public $on_sanitize; public $on_html; protected function _get() { return $this->value; } protected function _set($value) { $this->value = $value; } protected function _styles() { return ''; } protected function _scripts() { return ''; } abstract protected function _sanitize($value); abstract protected function _html(); public function __construct($name, $default, $properties = array()) { parent::__construct($name); $this->domain = DroneTheme::getInstance()->domain; $this->default = $default; $ro = new ReflectionObject($this); foreach ($ro->getProperties(ReflectionProperty::IS_PUBLIC) as $property) { $property = $property->getName(); if (in_array($property, array_keys($properties))) { $this->{$property} = $properties[$property]; } } $this->reset(); } public function __get($name) { if ($name == 'value') { return $this->_get(); } else { return $this->{$name}; } } public function __set($name, $value) { if ($name == 'value') { $this->_set($this->sanitize($value)); } } public static function getObjectClass($type) { static $cache = array(); if (isset($cache[$type])) { return $cache[$type]; } if (class_exists($class = DroneFunc::stringPascalCase(DroneTheme::getInstance()->theme->id."_options_{$type}_option"))) { return $cache[$type] = $class; } if (!is_null(DroneTheme::getInstance()->parent_theme) && class_exists($class = DroneFunc::stringPascalCase(DroneTheme::getInstance()->parent_theme->id."_options_{$type}_option"))) { return $cache[$type] = $class; } if (class_exists($class = DroneFunc::stringPascalCase("drone_options_{$type}_option"))) { return $cache[$type] = $class; } return false; } public function getCSSClass($class = __CLASS__) { if (preg_match('/^([A-Z].+)Options([A-Z].+)Option$/', $class, $matches)) { return DroneFunc::stringID($matches[1].'-option-'.$matches[2]); } else { return DroneFunc::stringID($class); } } public function isDefault() { return $this->_get() === $this->default; } public function isError() { if (is_null($this->error_value)) { return false; } if (is_callable($this->error_value)) { return $this->_get() === call_user_func_array($this->error_value, array($this)); } return $this->_get() === $this->error_value; } public function reset() { $this->_set($this->default); } public function importFromArray(&$haystack) { if (!is_array($haystack)) { return false; } if (!preg_match('/^[-_a-z0-9]+((\[[-_a-z0-9]+\])+)$/i', $this->name, $matches)) { return false; } $array_def = '$h'.str_replace(array('[', ']'), array("['", "']"), $matches[1]); $extract = create_function('$o, &$h', "return isset({$array_def}) ? \$o->sanitize({$array_def}) : \$o->default;"); $this->_set($extract($this, $haystack)); return true; } public function styles() { return $this->_styles(); } public function scripts() { return $this->_scripts(); } public function sanitize($value) { $_value = $this->_sanitize($value); if (is_callable($this->on_sanitize)) { call_user_func_array($this->on_sanitize, array($this, $value, &$_value)); } return $_value; } public function html() { $_html = $this->_html(); if (is_callable($this->on_html)) { call_user_func_array($this->on_html, array($this, &$_html)); } return $_html; } } abstract class DroneOptionsComplexOption extends DroneOptionsOption { abstract protected function _options(); protected function _get() { $value = array(); foreach ($this->default as $option => $default) { $value[$option] = isset($this->{$option}) ? $this->{$option}->value : $default; } return $value; } protected function _set($value) { foreach ($this->default as $option => $default) { if (isset($this->{$option})) { $this->{$option}->value = isset($value[$option]) ? $value[$option] : $default; } } } protected function _styles() { $styles = ''; foreach (array_keys($this->default) as $option) { if (isset($this->{$option})) { $styles .= $this->{$option}->styles(); } } return $styles; } protected function _scripts() { $scripts = ''; foreach (array_keys($this->default) as $option) { if (isset($this->{$option})) { $scripts .= $this->{$option}->scripts(); } } return $scripts; } protected function _sanitize($value) { $_value = array(); foreach ($this->default as $option => $default) { $_value[$option] = isset($this->{$option}) && isset($value[$option]) ? $this->{$option}->sanitize($value[$option]) : $default; } return $_value; } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); foreach (array_intersect_key($this->_options(), $default) as $option_name => $option_type) { if ($option_class = self::getObjectClass($option_type)) { $this->{$option_name} = new $option_class("{$name}[{$option_name}]", $default[$option_name]); } } } public function __clone() { foreach (array_keys($this->default) as $option) { if (isset($this->{$option})) { $this->{$option} = clone $this->{$option}; } } } public function option($name) { if (in_array($name, array_keys($this->default)) && isset($this->{$name})) { return $this->{$name}; } } public function property($name) { if (in_array($name, array_keys($this->default)) && isset($this->{$name})) { return $this->{$name}->value; } } } class DroneOptionsCustomOption_Experimental extends DroneOptionsComplexOption { public $options; protected function _options() { return $this->options; } protected function _html() { $html = DroneHTML::make('div') ->class($this->getCSSClass(__CLASS__)); foreach (array_keys($this->default) as $option) { if (isset($this->{$option})) { $html->add($this->{$option}->html()); } } return $html; } public function __set($name, $value) { parent::__set($name, $value); if (in_array($name, array_keys($this->default))) { $this->{$name} = $value; } } } class DroneOptionsHiddenOption extends DroneOptionsOption { protected function _sanitize($value) { return (string)$value; } protected function _html() { return DroneHTML::makeHidden($this->name, $this->value) ->addClass($this->getCSSClass(__CLASS__)); } } class DroneOptionsTextOption extends DroneOptionsOption { public $maxlength = false; public $required = false; public $trim = true; public $regexpr = ''; protected function _sanitize($value) { $value = (string)$value; if ($this->trim) { $value = trim($value); } if ($this->maxlength && is_int($this->maxlength)) { $value = substr($value, 0, $this->maxlength); } if ($this->regexpr && !preg_match($this->regexpr, $value)) { $value = $this->default; } else if ($this->required && !$value) { $value = $this->default; } return $value; } protected function _html() { return DroneHTML::makeInput($this->name, $this->value) ->addClass($this->getCSSClass(__CLASS__)) ->title($this->default ? sprintf('%s: %s', __('Default', $this->domain), $this->default) : null) ->maxlength($this->maxlength); } } class DroneOptionsCodelineOption extends DroneOptionsTextOption { protected function _html() { return parent::_html() ->addClass($this->getCSSClass(__CLASS__), 'code') ->spellcheck('false'); } } class DroneOptionsMemoOption extends DroneOptionsTextOption { protected function _html() { return DroneHTML::makeTextarea($this->name, $this->value) ->addClass($this->getCSSClass(__CLASS__)) ->rows(10) ->cols(40); } } class DroneOptionsEditorOption extends DroneOptionsTextOption { public $media = true; public $rows = 15; protected function _html() { return DroneHTML::make('div') ->addClass($this->getCSSClass(__CLASS__)) ->add( DroneFunc::functionGetOutputBuffer('wp_editor', $this->value, DroneFunc::stringID($this->name), array( 'media_buttons' => $this->media, 'textarea_name' => $this->name, 'textarea_rows' => $this->rows )) ); } } class DroneOptionsCodeOption extends DroneOptionsMemoOption { protected function _html() { return parent::_html() ->addClass($this->getCSSClass(__CLASS__), 'code') ->spellcheck('false'); } } class DroneOptionsNumberOption extends DroneOptionsOption { public $min = false; public $max = false; public $float = false; public $unit = ''; protected function _sanitize($value) { if (!is_int($value) && (!$this->float || !is_float($value))) { $value = (string)$value; $value = str_replace(',', '.', $value); $value = preg_replace('/[^-\.0-9]/', '', $value); if (is_numeric($value)) { $value = $this->float ? floatval($value) : intval($value); } else { $value = $this->default; } } if ($this->min !== false) { $value = max($value, $this->min); } if ($this->max !== false) { $value = min($value, $this->max); } return $value; } protected function _html() { $input = DroneHTML::makeInput($this->name, $this->value) ->addClass($this->getCSSClass(__CLASS__), 'code') ->title($this->default ? sprintf('%s: %s%s', __('Default', $this->domain), $this->default, $this->unit) : null); if (!$this->float && is_numeric($this->min) && is_numeric($this->max)) { $input->maxlength = max(strlen($this->min), strlen($this->max)); } return $this->unit ? DroneHTML::make()->add($input, ' ', $this->unit) : $input; } } class DroneOptionsBooleanOption extends DroneOptionsOption { const TRUE_VALUE = 'on'; public $caption = ''; public $disabled = false; protected function _sanitize($value) { $value = (bool)$value; if ($this->disabled) { $value = $this->default; } return $value; } protected function _html() { $checkbox = DroneHTML::makeCheckboxSingle($this->name, $this->caption, $this->value) ->addClass($this->getCSSClass(__CLASS__)); if ($this->disabled) { $checkbox->child(0)->child(1)->disabled = true; if ($this->value) { $checkbox->child(0)->child(0)->value = self::TRUE_VALUE; } } return $checkbox; } } class DroneOptionsListOption extends DroneOptionsOption { public $options = array(); public $groups = array(); public $multiple = false; public $strict = true; protected function _sanitize($value) { if ($this->multiple) { $value = empty($value) ? array() : array_values((array)$value); if ($this->strict) { $value = array_intersect($value, array_keys($this->options)); } } else { if (is_array($value) && isset($value[0])) { $value = $value[0]; } $value = (string)$value; if ($this->strict && !isset($this->options[$value])) { $value = $this->default; } } return $value; } protected function _html() { return DroneHTML::makeSelect($this->name, $this->value, $this->options, $this->groups, $this->multiple) ->addClass($this->getCSSClass(__CLASS__)) ->title(!$this->multiple && isset($this->options[$this->default]) ? sprintf('%s: %s', __('Default', $this->domain), $this->options[$this->default]) : null); } public function values() { $value = (array)$this->value; $values = array(); foreach (array_keys($this->options) as $key) { $values[$key] = in_array($key, $value); } return $values; } public function value($name) { return in_array($name, (array)$this->value); } } class DroneOptionsGroupOption extends DroneOptionsListOption { public $style = 'vertical'; public $sortable = false; public $disabled = array(); protected function _sanitize($value) { $value = parent::_sanitize($value); if ($this->multiple) { foreach ($this->disabled as $disabled) { $key = array_search($disabled, $value); if (in_array($disabled, $this->default)) { if ($key === false) { $value[] = $disabled; } } else { if ($key !== false) { unset($value[$key]); } } } $value = array_values($value); } else { if ($value !== $this->default && (in_array($value, $this->disabled) || in_array($this->default, $this->disabled))) { $value = $this->default; } } return $value; } protected function _html() { if ($this->multiple) { if ($this->sortable) { $checked_options = array(); foreach ($this->value as $value) { if (isset($this->options[$value])) { $checked_options[$value] = $this->options[$value]; } } $options = $checked_options + array_diff_key($this->options, $checked_options); } else { $options = $this->options; } $group = DroneHTML::makeCheckboxGroup($this->name, $this->value, $options, ''); } else { $group = DroneHTML::makeRadioGroup($this->name, $this->value, $this->options, ''); } if (!empty($this->disabled)) { foreach ($group->childs() as $child) { if (is_object($child) && $child->tag == 'label') { $input = $child->child(0); if (in_array($input->value, $this->disabled)) { $input->disabled = true; if ($input->checked) { $child->insert(DroneHTML::makeHidden($input->name, $input->value)); } } } } } $class = $this->getCSSClass(__CLASS__); $group->addClass(array($class, "{$class}-{$this->style}")); if ($this->multiple && $this->sortable) { $group->addClass($class.'-sortable'); } return $group; } } class DroneOptionsImageGroupOption extends DroneOptionsGroupOption { public $style = 'horizontal'; protected function _html() { $image_group = parent::_html(); $image_group->addClass($this->getCSSClass(__CLASS__)); foreach ($image_group->childs() as $label) { $label->delete(1); $label->replace(1, DroneHTML::make('img')->src($label->child(1))->alt('')); $label->insert(DroneHTML::make('span')->add(), 1); } return $image_group; } } class DroneOptionsImageOption extends DroneOptionsCodelineOption { public $title; public $filter = 'bmp|jpe?g|png|gif|ico'; protected function _sanitize($value) { $value = parent::_sanitize($value); $filter = is_array($this->filter) ? implode('|', $this->filter) : $this->filter; if (!empty($filter) && !preg_match('/\.('.$filter.')$/i', $value)) { $value = $this->default; } return $value; } protected function _html() { $class = $this->getCSSClass(__CLASS__); return DroneHTML::make('div') ->addClass($class) ->attr("data-{$class}-title", $this->title) ->add( parent::_html(), ' ', DroneHTML::make('a')->class('button select')->add(__('Select', $this->domain)), ' ', DroneHTML::make('a')->class('button clear')->add(__('Clear', $this->domain)) ); } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); if (is_null($this->title)) { $this->title = __('Select image', $this->domain); } } } class DroneOptionsAttachmentOption extends DroneOptionsOption { public $title; public $type = 'image'; protected function _sanitize($value) { $value = (int)$value; if ($value !== 0 && is_null(get_post($value))) { $value = $this->default; } return $value; } protected function _html() { $class = $this->getCSSClass(__CLASS__); return DroneHTML::make('div') ->addClass($class) ->attr("data-{$class}-title", $this->title) ->attr("data-{$class}-type", $this->type) ->add( DroneHTML::makeHidden($this->name, $this->value), DroneHTML::make('span')->add($this->getTitle()), ' ', DroneHTML::make('a')->class('button select')->add(__('Select', $this->domain)), ' ', DroneHTML::make('a')->class('button clear')->add(__('Clear', $this->domain)) ); } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); if (is_null($this->title)) { $this->title = sprintf(__('Select %s', $this->domain), $this->type ? $this->type : __('file', $this->domain)); } } protected function getTitle() { return is_null($post = $this->post()) ? '&nbsp;' : sprintf('<code>%s</code> %s', $post->post_mime_type, $post->post_title); } public function post() { if ($this->value !== 0) { return get_post($this->value); } } public function uri($size = '') { if ($this->value !== 0 && ($image_src = wp_get_attachment_image_src($this->value, $size)) !== false) { return $image_src[0]; } else { return ''; } } public function size($size = '') { if ($this->value !== 0 && ($image_src = wp_get_attachment_image_src($this->value, $size)) !== false) { return array('width' => $image_src[1], 'height' => $image_src[2]); } else { return false; } } } class DroneOptionsColorOption extends DroneOptionsOption { public $required = true; protected function _sanitize($value) { if ($this->required && empty($value)) { $value = $this->default; } else if (!preg_match('/^#[0-9a-f]{6}$/i', $value)) { $value = $this->default; } return $value; } protected function _html() { $color_class = 'color {required:'.DroneFunc::boolToString($this->required).',hash:true}'; return DroneHTML::makeInput($this->name, $this->value) ->addClass($this->getCSSClass(__CLASS__), 'code', $color_class) ->title($this->default ? sprintf('%s: %s', __('Default', $this->domain), strtoupper($this->default)) : null); } public function isDefault() { return strtoupper($this->value) === strtoupper($this->default); } } class DroneOptionsArrayOption extends DroneOptionsOption { protected $type = 'text'; protected $prototype; protected $options; public $trim_default = true; public $sortable = true; protected function _get() { $value = array(); foreach ($this->options as $option) { $value[] = $option->value; } return $value; } protected function _set($value) { $this->reset(); foreach ((array)$value as $value) { $option = clone $this->prototype; $option->name = ''; $option->value = $value; $this->options[] = $option; } } protected function _styles() { $styles = ''; foreach ($this->options as $option) { $styles .= $option->styles(); } return $styles; } protected function _scripts() { $scripts = ''; foreach ($this->options as $option) { $scripts .= $option->scripts(); } return $scripts; } protected function _sanitize($value) { $value = empty($value) ? array() : (array)$value; if (isset($value['__prototype'])) { unset($value['__prototype']); } if ($this->trim_default) { foreach ($value as $key => &$val) { $val = $this->prototype->sanitize($val); if ($val === $this->default) { unset($value[$key]); } } unset($val); } $value = array_values($value); return $value; } protected function _html() { $class = $this->getCSSClass(__CLASS__); $html = DroneHTML::make('div')->class($class); if ($this->sortable) { $html->addClass($class.'-sortable'); } $ul = $html->addNew('ul')->add(); foreach ($this->value as $value) { $option = clone $this->prototype; $option->value = $value; $ul->addNew('li')->add( DroneHTML::make('div')->add($option->html()), DroneHTML::make('a')->class('button delete')->add(__('Delete', $this->domain)) ); } $html->addNew('div') ->class($class.'-prototype') ->add( DroneHTML::make('div')->add($this->prototype->html()), DroneHTML::make('a')->class('button delete')->add(__('Delete', $this->domain)) ); $html->addNew('div') ->class($class.'-controls') ->addNew('a')->class('button add')->add(__('Add new', $this->domain)); return $html; } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); $this->setType(isset($properties['type']) ? $properties['type'] : $this->type, $default, $properties); } public function __clone() { $this->prototype = clone $this->prototype; foreach (array_keys($this->options) as $key) { $this->options[$key] = clone $this->options[$key]; } } public function setType($type, $default, $properties = array()) { if ($class = self::getObjectClass($type)) { $this->reset(); $this->type = $type; $this->prototype = new $class($this->name.'[__prototype]', $default, $properties); return true; } return false; } public function isDefault() { return count($this->options) == 0; } public function reset() { $this->options = array(); } public function value($i) { if (isset($this->options[$i])) { return $this->options[$i]; } } } class DroneOptionsConditionalTagOption_Experimental extends DroneOptionsOption { protected static $groups = array(); protected static $tags = array(); public static $custom_groups = array(); public static $custom_tags = array(); protected function _sanitize($value) { $value = (string)$value; if (!isset(self::$tags[$value]) && !isset(self::$custom_tags[$value])) { $value = $this->default; } return $value; } protected function _html() { $groups = self::$groups; foreach (self::$custom_groups as $label => $tags) { $groups[$label] = isset($groups[$label]) ? array_merge($groups[$label], $tags) : $tags; } $tags = self::$tags + self::$custom_tags; return DroneHTML::makeSelect($this->name, $this->value, $tags, $groups) ->addClass($this->getCSSClass(__CLASS__)) ->title(isset($tags[$this->default]) ? sprintf('%s: %s', __('Default', $this->domain), self::$tags[$this->default]) : null); } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); if (!self::$groups || !self::$tags) { self::$groups = array( __('General', $this->domain) => array('front_page', 'home,archive', 'search', 'singular(post)', 'page', 'singular(attachment)', '404'), __('Post categories', $this->domain) => array(), __('bbPress', $this->domain) => array('bbpress'), __('WooCommerce', $this->domain) => array('product', 'shop,product_taxonomy,product', 'cart', 'checkout', 'order_received_page', 'account_page', 'shop,product_taxonomy,product,cart,checkout,order_received_page,account_page') ); self::$tags = array( 'front_page' => __('Front page', $this->domain), 'home,archive' => __('Blog / archive', $this->domain), 'search' => __('Search results page', $this->domain), 'singular(post)' => __('Posts', $this->domain), 'page' => __('Pages', $this->domain), 'singular(attachment)' => __('Attachments', $this->domain), '404' => __('Not found page (404)', $this->domain) ); foreach (DroneFunc::wpTermsList('category', array('hide_empty' => false)) as $id => $name) { self::$groups[__('Post categories', $this->domain)][] = "category({$id})"; self::$tags["category({$id})"] = sprintf(__('%s category', $this->domain), $name); } if (function_exists('bbp_version')) { self::$tags += array( 'bbpress' => __('Any page', $this->domain) ); } if (defined('WOOCOMMERCE_VERSION')) { self::$tags += array( 'product' => __('Product', $this->domain), 'shop,product_taxonomy,product' => __('Shop', $this->domain), 'cart' => __('Cart', $this->domain), 'checkout' => __('Checkout', $this->domain), 'order_received_page' => __('Order received', $this->domain), 'account_page' => __('Account', $this->domain), 'shop,product_taxonomy,product,cart,checkout,order_received_page,account_page' => __('Any page', $this->domain) ); } } } public function is() { if ($this->value === '') { return false; } foreach (explode(',', $this->value) as $tag) { if (!preg_match('/^([-_a-z0-9]+)(\(([^,\(\)]*)\))?$/i', $tag, $matches)) { continue; } $name = $matches[1]; $params = empty($matches[3]) ? array() : explode(' ', $matches[3]); if (!function_exists($func = 'is_'.$name) && !function_exists($func = $name)) { continue; } if (call_user_func_array($func, $params)) { return true; } } return false; } } class DroneOptionsConditionalTagArrayOption_Experimental extends DroneOptionsArrayOption { public function setType($type, $default, $properties = array()) { if ($class = self::getObjectClass($type)) { $this->type = $type; $this->prototype = new DroneOptionsCustomOption($this->name.'[__prototype]', array( 'conditional_tag' => '', 'conditional_value' => $default ), array('options' => array( 'conditional_tag' => 'conditional_tag', 'conditional_value' => $type ), 'on_html' => array($this, 'callbackPrototypeOnHTML')), $properties); return true; } return false; } public function callbackPrototypeOnHTML($option, &$html) { $html = DroneHTML::make()->add( DroneHTML::make('div')->add($option->option('conditional_tag')->html()), DroneHTML::make('div')->add($option->option('conditional_value')->html()) ); } } class DroneOptionsConditionalTagArrayExOption_Experimental extends DroneOptionsComplexOption { protected $values; protected $default; public $type = 'text'; protected function _options() { return array( 'values' => 'conditional_tag_array', 'default' => $this->type ); } protected function _html() { $html = DroneHTML::make('div') ->class($this->getCSSClass(__CLASS__)) ->add( $this->values->html(), $this->default->html() ); return $html; } public function __construct($name, $default, $properties = array()) { parent::__construct($name, array('values' => $default, 'default' => $default), $properties); $this->values->setType($this->type, $default, $properties); } } class DroneOptionsSizeOption extends DroneOptionsComplexOption { protected $width; protected $height; public $min = false; public $max = false; public $float = false; public $unit = 'px'; protected function _options() { return array( 'width' => 'number', 'height'=> 'number' ); } protected function _html() { $html = DroneHTML::make('div') ->class($this->getCSSClass(__CLASS__)) ->add( $this->width->html(), ' x ', $this->height->html() ); if ($this->unit) { $html->add(' ', $this->unit); } return $html; } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); $this->width->min = $this->min; $this->width->max = $this->max; $this->width->float = $this->float; $this->height->min = $this->min; $this->height->max = $this->max; $this->height->float = $this->float; } } class DroneOptionsBackgroundOption extends DroneOptionsComplexOption { protected $image; protected $color; protected $alignment; protected $position; protected $attachment; protected function _options() { return array( 'image' => 'image', 'color' => 'color', 'alignment' => 'list', 'position' => 'list', 'attachment' => 'list' ); } protected function _html() { $html = DroneHTML::make('div') ->class($this->getCSSClass(__CLASS__)) ->add($this->image->html()); if (isset($this->color) || isset($this->alignment) || isset($this->position) || isset($this->attachment)) { if (isset($this->color)) { $html->add($this->color->html(), ' '); } if (isset($this->alignment)) { $html->add($this->alignment->html(), ' '); } if (isset($this->position)) { $html->add($this->position->html(), ' '); } if (isset($this->attachment)) { $html->add($this->attachment->html()); } } return $html; } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); if (isset($this->alignment)) { $this->alignment->options = array( 'no-repeat' => __('No repeat', $this->domain), 'repeat' => __('Repeat', $this->domain), 'repeat-x' => __('Repeat horizontally', $this->domain), 'repeat-y' => __('Repeat vertically', $this->domain), 'cover' => __('Fit (cover)', $this->domain), 'contain' => __('Fit (contain) ', $this->domain), ); } if (isset($this->position)) { $this->position->options = array( 'left top' => __('Left top', $this->domain), 'left center' => __('Left center', $this->domain), 'left bottom' => __('Left bottom', $this->domain), 'center top' => __('Center top', $this->domain), 'center center' => __('Center', $this->domain), 'center bottom' => __('Center bottom', $this->domain), 'right top' => __('Right top', $this->domain), 'right center' => __('Right center', $this->domain), 'right bottom' => __('Right bottom', $this->domain) ); } if (isset($this->attachment)) { $this->attachment->options = array( 'scroll' => __('Scroll', $this->domain), 'fixed' => __('Fixed', $this->domain) ); } } public function css($selector = '') { if (isset($this->alignment)) { if (strpos($this->alignment->value, 'repeat') !== false) { $repeat = $this->alignment->value; } else { $repeat = 'no-repeat'; $size = $this->alignment->value; } } if (isset($this->color) && isset($repeat) && isset($this->position) && isset($this->attachment)) { $css = sprintf('background: %s %s %s %s %s;', $this->image->value ? sprintf('url(%s)', $this->image->value) : '', $this->color->value, $repeat, $this->position->value, $this->attachment->value ); } else { $css = $this->image->value ? sprintf('background-image: url(%s);', $this->image->value) : ''; if (isset($this->color)) { $css .= " background-color: {$this->color->value};"; } if (isset($repeat)) { $css .= " background-repeat: {$repeat};"; } if (isset($this->position)) { $css .= " background-position: {$this->position->value};"; } if (isset($this->attachment)) { $css .= " background-attachment: {$this->attachment->value};"; } } if (isset($size)) { $css .= " background-size: {$size};"; if ($this->image->value) { } } return $selector ? "{$selector} { {$css} }" : $css; } } class DroneOptionsFontOption extends DroneOptionsComplexOption { const GOOGLE_WEBFONTS_UPDATE_INTERVAL = 14; const GOOGLE_WEBFONTS_UPDATE_INTERVAL_JITTER = 1; protected static $instances = array(); protected static $web_safe = array( 'Arial, Helvetica, sans-serif' => 'Arial', 'Arial Black, Gadget, sans-serif' => 'Arial Black', 'Arial Narrow, sans-serif' => 'Arial Narrow', 'Century Gothic, sans-serif' => 'Century Gothic', 'Courier New, Courier, monospace' => 'Courier New', 'Georgia, Serif' => 'Georgia', 'Helvetica, Arial, sans-serif' => 'Helvetica', 'Impact, Charcoal, sans-serif' => 'Impact', 'Lucida Console, Monaco, monospace' => 'Lucida Console', 'Lucida Sans Unicode, Lucida Grande, sans-serif' => 'Lucida Sans Unicde', 'Palatino Linotype, Book Antiqua, Palatino, serif' => 'Palatino Linotype', 'Tahoma, Geneva, sans-serif' => 'Tahoma', 'Times New Roman, Times, serif' => 'Times New Roman', 'Trebuchet MS, Helvetica, sans-serif' => 'Trebuchet MS', 'Verdana, Geneva, sans-serif' => 'Verdana' ); protected static $google_webfonts = array(); public static $fonts_directory = 'fonts'; public static $fonts_exts = array('eot', 'woff', 'ttf', 'svg'); protected $family; protected $color; protected $size; protected $line_height; protected $styles; public $allow_web_safe = true; public $allow_google_webfonts = true; public $allow_custom_fontface = true; public $size_unit = 'px'; public $line_height_unit = '%'; protected function _options() { return array( 'family' => 'list', 'color' => 'color', 'size' => 'number', 'line_height' => 'number', 'styles' => 'group' ); } protected function _scripts() { static $outputted = false; if ($outputted) { return ''; } else { $outputted = true; } $google_webfonts = array(); if (self::$google_webfonts !== false) { foreach (self::$google_webfonts as $font) { $google_webfonts[] = $font['family']; } } $custom_fontface = array(); foreach (DroneFunc::filesList(DroneTheme::getInstance()->template_dir.'/'.self::$fonts_directory, self::$fonts_exts) as $font) { $pathinfo = pathinfo($font); $custom_fontface[$pathinfo['filename']] = ucwords(DroneFunc::stringID(preg_replace('/webfont$/', '', $pathinfo['filename']), ' ')); } return sprintf('var web_safe = %s;', json_encode(self::$web_safe)). sprintf('var google_webfonts = %s;', json_encode($google_webfonts)). sprintf('var custom_fontface = %s;', json_encode($custom_fontface)); } protected function _html() { $html = DroneHTML::make('div') ->class($this->getCSSClass(__CLASS__)) ->add($this->family->html()); if (isset($this->color)) { $html->add(' ', $this->color->html()); } if (isset($this->size)) { $html->add(' ', $this->size->html()); } if (isset($this->line_height)) { $html->add(isset($this->size) ? ' / ' : ' ', $this->line_height->html()); } if (isset($this->styles)) { $html->add('<br />', $this->styles->html()); } return $html; } public function __construct($name, $default, $properties = array()) { parent::__construct($name, $default, $properties); self::$instances[] = $this; if (!self::$google_webfonts && (self::$google_webfonts = get_transient($this->domain.'_google_webfonts')) === false) { self::$google_webfonts = DroneFunc::googleGetWebfonts(DroneFunc::GOOGLE_API_KEY); if (self::$google_webfonts === false) { self::$google_webfonts = unserialize(file_get_contents(TEMPLATEPATH.'/'.Drone::DIRECTORY.'/odd/google-webfonts.dat')); } $expiration = DroneFunc::intRandJitter(self::GOOGLE_WEBFONTS_UPDATE_INTERVAL, self::GOOGLE_WEBFONTS_UPDATE_INTERVAL_JITTER)*86400; set_transient($this->domain.'_google_webfonts', self::$google_webfonts, $expiration); } $this->family->strict = false; $this->family->on_html = array($this, 'callbackFamilyOnHTML'); if ($this->allow_web_safe) { $this->family->groups[__('Classic web fonts', $this->domain)] = array(); } if ($this->allow_google_webfonts) { $this->family->groups[__('Google webfonts', $this->domain)] = array(); } if ($this->allow_custom_fontface) { $this->family->groups[__('Custom font-face', $this->domain)] = array(); } if (isset($this->color)) { $this->color->required = false; $this->color->on_html = create_function('$option, &$html', '$html->placeholder("'.__('default', $this->domain).'");'); } if (isset($this->size)) { $this->size->unit = $this->size_unit; switch ($this->size_unit) { case 'px': case 'pt': $this->size->min = 0; $this->size->max = 100; break; case 'em': $this->size->float = true; $this->size->min = 0; $this->size->max = 10; break; case '%': $this->size->float = true; $this->size->min = 0; $this->size->max = 1000; break; } } if (isset($this->line_height)) { $this->line_height->unit = $this->line_height_unit; switch ($this->line_height_unit) { case 'px': case 'pt': $this->line_height->min = 0; $this->line_height->max = 100; break; case 'em': case '': $this->line_height->float = true; $this->line_height->min = 0; $this->line_height->max = 10; break; case '%': $this->line_height->float = true; $this->line_height->min = 0; $this->line_height->max = 1000; break; } } if (isset($this->styles)) { $this->styles->multiple = true; $this->styles->style = 'horizontal'; $this->styles->options = array( 'bold' => __('Bold', $this->domain), 'italic' => __('Italic', $this->domain), 'underline' => __('Underline', $this->domain) ); } } public function __clone() { parent::__clone(); self::$instances[] = $this; } public function __destruct() { if (($instance_key = array_search($this, self::$instances, true)) !== false) { unset(self::$instances[$instance_key]); } } public function callbackFamilyOnHTML($option, &$html) { $html->attr('data-value', $option->value); $i = 0; foreach (array('web_safe', 'google_webfonts', 'custom_fontface') as $type) { if ($this->{'allow_'.$type}) { $html->child($i)->attr('data-type', $type); $i++; } } } public function css($selector = '') { $family = preg_replace('/[-_a-z0-9]+( [-_a-z0-9]+)+/i', '"\0"', $this->family->value); if (isset($this->size) && isset($this->line_height) && isset($this->styles)) { $css = sprintf('font: %s%s%s %s%s/%s%s %s;', !$this->styles->value('bold') && !$this->styles->value('italic') ? ' normal' : '', $this->styles->value('bold') ? ' bold' : '', $this->styles->value('italic') ? ' italic' : '', $this->size->value, $this->size->unit, $this->line_height->value, $this->line_height->unit, $family ); } else { $css = "font-family: {$family};"; if (isset($this->size)) { $css .= " font-size: {$this->size->value}{$this->size_unit};"; } if (isset($this->line_height)) { $css .= " line-height: {$this->line_height->value}{$this->line_height_unit};"; } if (isset($this->styles)) { $css .= sprintf(' font-weight: %s;', $this->styles->value('bold') ? 'bold' : 'normal'); $css .= sprintf(' font-style: %s;', $this->styles->value('italic') ? 'italic' : 'normal'); } } if (isset($this->styles)) { $css .= sprintf(' text-decoration: %s;', $this->styles->value('underline') ? 'underline' : 'none'); } if (isset($this->color) && $this->color->value) { $css .= " color: {$this->color->value};"; } return $selector ? "{$selector} { {$css} }" : $css; } protected static function getGoogleWebfont($family) { foreach (self::$google_webfonts as $google_webfont) { if ($google_webfont['family'] == $family) { return $google_webfont; } } return false; } protected static function getUsedFonts() { $fonts = array(); foreach (self::$instances as $instance) { if ($instance->isVisible()) { $fonts[] = $instance->value['family']; } } return array_unique($fonts); } public static function getInstances() { return self::$instances; } public static function __actionWPEnqueueScripts() { $google_webfonts = array(); foreach (self::getUsedFonts() as $font) { if (isset(self::$web_safe[$font])) { continue; } else if (($google_webfont = self::getGoogleWebfont($font)) !== false) { $variants = array(); foreach ($google_webfont['variants'] as $variant) { $variant = preg_replace('/^(regular|(italic))$/', '400\2', $variant); if (strpos($variant, '400') === 0 || strpos($variant, '700') === 0) { $variants[] = $variant; } } $google_webfonts[] = sprintf('%s:%s:%s', urlencode($google_webfont['family']), implode(',', $variants), implode(',', $google_webfont['subsets']) ); } else { $uri = DroneTheme::getInstance()->template_uri.'/'.self::$fonts_directory; DroneTheme::getInstance()->addDocumentStyle( <<<EOS
					@font-face {
						font-family: '{$font}';
						font-weight: normal;
						font-style:  normal;
						src: url('{$uri}/{$font}.eot');
						src: url('{$uri}/{$font}.eot?#iefix') format('embedded-opentype'),
						     url('{$uri}/{$font}.woff') format('woff'),
						     url('{$uri}/{$font}.ttf') format('truetype'),
						     url('{$uri}/{$font}.svg#{$font}') format('svg');
					}
EOS
); } } if (count($google_webfonts) > 0) { wp_enqueue_script(DroneTheme::getInstance()->theme->id.'-webfont'); DroneTheme::getInstance()->addDocumentScript( 'WebFont.load({google: {families: '.json_encode($google_webfonts).'}});' ); } } }